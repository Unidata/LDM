/* DO NOT EDIT THIS FILE. It was created by extractDecls */
/*
 * Copyright 2014 University Corporation for Atmospheric Research. All rights
 * reserved.
 *
 * See file COPYRIGHT in the top-level source-directory for legal conditions.
 */

#ifndef DOUBLY_LINKED_LIST_H
#define DOUBLY_LINKED_LIST_H

#include <stdbool.h>
#include <stddef.h>

/**
 * Opaque type for this module.
 */
typedef struct Dll     Dll;
typedef struct DllElt  DllElt;
typedef struct DllIter DllIter;

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Returns a new doubly-linked list.
 *
 * @retval NULL  Error. `log_add()` called.
 * @return       Pointer to a new doubly-linked list. The client should call
 *               `dll_free()` when it is no longer needed.
 */
Dll*
dll_new(void);

/**
 * Adds a pointer to the tail of a doubly-linked list.
 *
 * @param[in] dll   Pointer to the list to have a pointer added to it.
 * @param[in] ptr   The pointer to be added. Should not be `NULL`.
 * @retval    NULL  Out-of-memory. `log_add()` called.
 * @retval    NULL  `ptr == NULL`. `log_add()` called.
 * @return          Pointer to the list element that contains the pointer.
 */
DllElt*
dll_add(
    Dll* const  dll,
    void* const ptr);

/**
 * Removes and returns the pointer at the head of a doubly-linked list.
 *
 * @param[in] dll   Pointer to the doubly-linked list.
 * @return          The pointer that the head element contained.
 * @retval    NULL  The list is empty.
 */
void*
dll_getFirst(
    Dll* const dll);

/**
 * Returns an iterator.
 *
 * @param[in] dll   The doubly-linked-list.
 * @retval    NULL  Out-of-memory. `log_add()` called.
 * @return          An iterator over the list.
 */
DllIter* dll_iter(
        Dll* const dll);

/**
 * Indicates if the next pointer exists.
 *
 * @param[in] iter    The iterator.
 * @retval    `true`  if and only if the next pointer exits.
 */
bool dll_hasNext(
        DllIter* const iter);

/**
 * Returns the next pointer.
 *
 * @pre             `dll_hasNext(iter) == true`
 * @param[in] iter  The iterator.
 * @return          The next pointer.
 */
void* dll_next(
        DllIter* const iter);

/**
 * Frees an iterator.
 *
 * @param[in] iter  The iterator to be freed.
 */
void dll_freeIter(
        DllIter* const iter);

/**
 * Returns the number of elements in a doubly-linked list.
 *
 * @param[in] dll  Pointer to the doubly-linked list.
 * @return         The number of elements in the list.
 */
size_t
dll_size(
    const Dll* const dll);

/**
 * Removes an element from a doubly-linked list.
 *
 * @param[in] dll  Pointer to the list to have an element removed.
 * @param[in] elt  Pointer to the element to be removed. Must have been returned
 *                 by `dll_add()` and must be in the list. The caller must not
 *                 reference `elt` after this function.
 * @return         The pointer that the removed element contained.
 */
void*
dll_remove(
    Dll* const    dll,
    DllElt* const elt);

/**
 * Frees a doubly-linked list.
 *
 * @param[in] dll  Pointer to the doubly-linked list to be freed. Must have
 *                 been returned by `dll_new()`.
 */
void
dll_free(
    Dll* const dll);

#ifdef __cplusplus
}
#endif

#endif
