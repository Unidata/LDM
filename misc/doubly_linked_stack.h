/* DO NOT EDIT THIS FILE. It was created by extractDecls */
/*
 * Copyright 2014 University Corporation for Atmospheric Research. All rights
 * reserved.
 *
 * See file COPYRIGHT in the top-level source-directory for legal conditions.
 */

#ifndef DOUBLY_LINKED_STACK_H
#define DOUBLY_LINKED_STACK_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Opaque type for this module.
 */
typedef struct Dls    Dls;
typedef struct DlsElt DlsElt;

/**
 * Returns a new doubly-linked stack.
 *
 * @retval NULL  Error. `log_add()` called.
 * @return       Pointer to a new doubly-linked stack. The client should call
 *               `dls_free()` when it is no longer needed.
 */
Dls*
dls_new(void);

/**
 * Pushes a pointer onto a doubly-linked stack.
 *
 * @param[in] dls   Pointer to the stack to have a pointer pushed onto it.
 * @param[in] ptr   The pointer to be pushed. Should not be `NULL`.
 * @retval    NULL  Error. `log_add()` called.
 * @return          Pointer to the stack element that contains the pointer.
 */
DlsElt*
dls_push(
    Dls* const  dls,
    void* const ptr);

/**
 * Pops a pointer from a doubly-linked stack.
 *
 * @param[in] dls   Pointer to the stack to be popped.
 * @return          The pointer that the popped element contained.
 * @retval    NULL  The stack is empty.
 */
void*
dls_pop(
    Dls* const dls);

/**
 * Removes an element from a doubly-linked stack.
 *
 * @param[in] dls  Pointer to the stack to have an element removed.
 * @param[in] elt  Pointer to the element to be removed. Must have been returned
 *                 by `dls_push(dls)` and must be in the stack.
 * @return         The pointer that the removed element contained.
 */
void*
dls_remove(
    Dls* const    dls,
    DlsElt* const elt);

/**
 * Frees a doubly-linked stack.
 *
 * @param[in] dls  Pointer to the doubly-linked stack to be freed. Must have
 *                 been returned by `dls_new()`.
 */
void
dls_free(
    Dls* const dls);

#ifdef __cplusplus
}
#endif

#endif
