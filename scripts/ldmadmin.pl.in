#!@PERL@
use POSIX;
use Fcntl qw(:flock); # import LOCK_* constants
#
# File:         ldmadmin
#
# See file ../COPYRIGHT for copying and redistribution conditions.
#
# Description: This perl script provides a command line interface to LDM
#  programs.
#
# Files:
#
#  $LDMHOME/ldmd.pid         file containing process group ID
#  $LDMHOME/.ldmadmin.lck    lock file for operations that modify the state of
#                            the LDM system
#  $LDMHOME/.[0-9a-f]*.info  product-information of the last, successfuly-
#                            received data-product
###############################################################################

# Set the $ldmhome variable from the LDMHOME environment variable if available;
# otherwise, use the configure(1)-determined value. This is necessary for
# relocated binary RPM installations.
$ldmhome = "$ENV{'LDMHOME'}";
if (!$ldmhome) {
    $ldmhome = "@LDMHOME@";
}

srand;	# called once at start

# Some parameters used by this script:
$progname = "ldmadmin";
$feedset = "ANY";
$pattern = ".*";
chop($os = `uname -s`);
chop($release = `uname -r`);
$begin = 19700101;
$end = 30000101;
$lock_file = "$ldmhome/.ldmadmin.lck";
$pid_file = "$ldmhome/ldmd.pid";
$line_prefix = "";
$pqact_conf_option = 0;

# Ensure that the utilities of this version are favored
$ENV{'PATH'} = "@EXEC_PREFIX@:$ldmhome/util:$ENV{'PATH'}";

# we want a flush after every print statement
$| = 1;

# Get the command. Default to "usage" if no command specified.
$_ = $ARGV[0];
shift;
$command = $_;
if (!$command) {
    $command = "usage";
}

# Ensure that the registry is available because a locked registry will cause
# this script to hang.
if (resetRegistry()) {
    exit 4;
}

# Get some registry parameters
@regpar = (
    [\$ldmd_conf, "regpath{LDMD_CONFIG_PATH}"],
    [\$pq_path, "regpath{QUEUE_PATH}"],
    [\$hostname, "regpath{HOSTNAME}"],
    [\$insertion_check_period, "regpath{INSERTION_CHECK_INTERVAL}"],
    [\$pq_size, "regpath{QUEUE_SIZE}"],
    [\$pq_slots, "regpath{QUEUE_SLOTS}"],
    [\$reconMode, "regpath{RECONCILIATION_MODE}"],
    [\$surf_path, "regpath{SURFQUEUE_PATH}"],
    [\$surf_size, "regpath{SURFQUEUE_SIZE}"],
    [\$metrics_file, "regpath{METRICS_FILE}"],
    [\$metrics_files, "regpath{METRICS_FILES}"],
    [\$log_file, "regpath{LOG_FILE}"],
    [\$numlogs, "regpath{LOG_COUNT}"],
    [\$log_rotate, "regpath{LOG_ROTATE}"],
    [\$num_metrics, "regpath{METRICS_COUNT}"],
    [\$ip_addr, "regpath{IP_ADDR}"],
    [\$port, "regpath{PORT}"],
    [\$max_clients, "regpath{MAX_CLIENTS}"],
    [\$max_latency, "regpath{MAX_LATENCY}"],
    [\$offset, "regpath{TIME_OFFSET}"],
    [\$pqact_conf, "regpath{PQACT_CONFIG_PATH}"],
    [\$scour_file, "regpath{SCOUR_CONFIG_PATH}"],
    [\$check_time , "regpath{CHECK_TIME}"],
    [\$warn_if_check_time_disabled, "regpath{WARN_IF_CHECK_TIME_DISABLED}"],
    [\$ntpdate, "regpath{NTPDATE_COMMAND}"],
    [\$ntpdate_timeout, "regpath{NTPDATE_TIMEOUT}"],
    [\$time_servers, "regpath{NTPDATE_SERVERS}"],
    [\$check_time_limit, "regpath{CHECK_TIME_LIMIT}"],
    [\$netstat, "regpath{NETSTAT_COMMAND}"],
    [\$top, "regpath{TOP_COMMAND}"],
    [\$delete_info_files, "regpath{DELETE_INFO_FILES}"],
);
for my $entryRef (@regpar) {
    ${$entryRef->[0]} = `regutil $entryRef->[1]` || \
        die "Couldn't get \"$entryRef->[1]\"";
    chop(${$entryRef->[0]});
}
@time_servers = split(/\s+/, $time_servers);

# Check the hostname for a fully-qualified version.
#
if ($hostname !~ /\./) {
    errmsg("The LDM-hostname is not fully-qualified.  " . 
        "Execute the command \"regutil -s <hostname> regpath{HOSTNAME}\" ".
        "to set the fully-qualified name of the host.");
    exit 1;
}

# Change the current working directory to the home directory.  This will prevent
# core files from being created all over the place.
#
chdir $ldmhome;

#
# process the command request
#
if ($command eq "start") {	# start the ldm
    while ($_ = $ARGV[0]) {
        shift;
        /^([a-z]|[A-Z]|\/)/ && ($ldmd_conf = $_);
        /^-q/ && ($q_path = shift);
        /^-v/ && $verbose++;
        /^-x/ && ($debug++, $verbose++);
        /^-M/ && ($max_clients = shift);
        /^-m/ && ($max_latency = shift);
        /^-o/ && ($offset = shift);
    }
    if ($q_path) {
        $pq_path = $q_path;
    }
    if (0 == ($status = getLock())) {
        $status = start_ldm();
        releaseLock();
    }
}
elsif ($command eq "stop") {	# stop the ldm
    if (0 == ($status = getLock())) {
        $status = stop_ldm();
        releaseLock();
    }
}
elsif ($command eq "restart") {	# restart the ldm
    while ($_ = $ARGV[0]) {
        shift;
        /^([a-z]|[A-Z]|\/)/ && ($ldmd_conf = $_);
        /^-q/ && ($q_path = shift);
        /^-v/ && $verbose++;
        /^-x/ && ($debug++, $verbose++);
        /^-M/ && ($max_clients = shift);
        /^-m/ && ($max_latency = shift);
        /^-o/ && ($offset = shift);
    }
    if ($q_path) {
        $pq_path = $q_path;
    }
    if (0 == ($status = getLock())) {
        $status = stop_ldm();
        if (!$status) {
            $status = start_ldm();
        }
        releaseLock();
    }
}
elsif ($command eq "mkqueue") {	# create a product queue using pqcreate(1)
    while ($_ = $ARGV[0]) {
        shift;
        /^-q/ && ($q_path = shift);
        /^-c/ && $pq_clobber++;
        /^-f/ && $pq_fast++;
        /^-v/ && $verbose++;
        /^-x/ && ($debug++, $verbose++);
    }
    if ($q_path) {
        $pq_path = $q_path;
    }
    if (0 == ($status = getLock())) {
        $status = make_pq();
        releaseLock();
    }
}
elsif ($command eq "delqueue") { # delete a product queue
    while ($_ = $ARGV[0]) {
        shift;
        /^-q/ && ($q_path = shift);
    }
    if ($q_path) {
        $pq_path = $q_path;
    }
    if (0 == ($status = getLock())) {
        $status = deleteQueue($pq_path);
        if ($status == 0 && $delete_info_files) {
            unlink <.*.info>;
        }
        releaseLock();
    }
}
elsif ($command eq "mksurfqueue") { # create a product queue for pqsurf(1)
    while ($_ = $ARGV[0]) {
        shift;
        /^-q/ && ($q_path = shift);
        /^-c/ && $pq_clobber++;
        /^-f/ && $pq_fast++;
        /^-v/ && $verbose++;
        /^-x/ && ($debug++, $verbose++);
    }
    if ($q_path) {
        $surf_path = $q_path;
    }
    if (0 == ($status = getLock())) {
        $status = make_surf_pq();
        releaseLock();
    }
}
elsif ($command eq "delsurfqueue") { # delete a pqsurf product queue
    while ($_ = $ARGV[0]) {
        shift;
        /^-q/ && ($q_path = shift);
    }
    if ($q_path) {
        $surf_path = $q_path;
    }
    if (0 == ($status = getLock())) {
        $status = deleteQueue($surf_path);
        releaseLock();
    }
}
elsif ($command eq "newlog") {	# rotate the log files
    while ($_ = $ARGV[0]) {
        shift;
        /^-n/ && ($numlogs = shift);
        /^-l/ && ($log_file = shift);
    }
    $status = new_log();
}
elsif ($command eq "scour") {	# scour data directories
   while ($_ = $ARGV[0]) {
        shift;
        /^-d/ && $delete++;
    }
    
    # Build the command line
    $cmd_line = "scour ";
    $cmd_line .= "-d " if ($delete);
    $cmd_line .= $scour_file;

    system($cmd_line);
    $status = $?;
}
elsif ($command eq "isrunning") { # check if the ldm is running
    $status = !isRunning($pid_file, $ip_addr);
}
elsif ($command eq "checkinsertion") { # check if a product has been inserted
    $status = check_insertion();
}
elsif ($command eq "vetqueuesize") { # vet the size of the queue
    if (0 == ($status = getLock())) {
        $status = vetQueueSize();
        releaseLock();
    }
}
elsif ($command eq "check") {	# check the LDM system
    if (0 == ($status = getLock())) {
        $status = check_ldm();
        releaseLock();
    }
}
elsif ($command eq "watch") {	# monitor incoming products
    while ($_ = $ARGV[0]) {
        shift;
        /^-f/ && ($feedset = shift);
        /^-p/ && ($pattern = shift);
    }
    if (!isRunning($pid_file, $ip_addr)) {
	errmsg("There is no LDM server running");
        $status = 1;
    }
    else {
        system("pqutil -r -f \"$feedset\" -w $pq_path");
        $status = $?;
    }
}
elsif ($command eq "pqactcheck") {	# check pqact file for errors
    while ($_ = $ARGV[0]) {
        shift;
        /^([a-z]|[A-Z]|\/)/ && ($ldmd_conf = $_);
        /^-p/ && ($pqact_conf = shift, $pqact_conf_option = 1);
    }
    $status = !are_pqact_confs_ok();
}
elsif ($command eq "pqactHUP") {	# HUP pqact 
    $status = ldmadmin_pqactHUP();
}
elsif ($command eq "queuecheck") {	# check queue for corruption 
    if (isRunning($pid_file, $ip_addr)) {
	errmsg("queuecheck: The LDM system is running. queuecheck aborted");
        $status = 1;
    }
    else {
        $status = !isProductQueueOk();
    }
}
elsif ($command eq "config") {	# show the ldm configuration
    $status = ldm_config();
}
elsif ($command eq "log") {	# page the logfile
    my $pager = "$ENV{'PAGER'}";
    if (!$pager) {
        $pager = "more";
    }
    system("$pager","$log_file");
    $status = $?;
}
elsif ($command eq "tail") {	# do a "tail -f" on the logfile
    system("tail","-f","$log_file");
    $status = $?;
}
elsif ($command eq "clean") {	# clean up after an abnormal termination
    if (isRunning($pid_file, $ip_addr)) {
	errmsg("The LDM system is running!  Stop it first.");
	$status = 1;
    }
    elsif ((-e $pid_file) && (unlink($pid_file) == 0)) {
        errmsg("Couldn't remove LDM server PID-file \"$pid_file\"");
        $status = 3;
    }
    else {
        system("rm -f $ldmhome/MldmRpc_*");
	$status = 0;
    }
}
elsif ($command eq "checktime") {
    print "Checking accuracy of system clock ... ";
    $check_time = 1;
    if (checkTime()) {
        print "\n";
	$status = 1;
    }
    else {
	print "OK\n";
    }
}
elsif ($command eq "printmetrics") {
    $status = printMetrics();
}
elsif ($command eq "addmetrics") {
    if (!open(METRICS_FILE,">>$metrics_file")) {
        errmsg("addmetrics(): Cannot create/open metrics-file \"$metrics_file\"");
        $status = 1;
    }
    else {
        if (!flock(METRICS_FILE, LOCK_EX | LOCK_NB)) {
            errmsg("addmetrics(): Couldn't lock metrics-file \"$metrics_file\". ".
                    "Another \"ldmadmin addmetrics\" is likely running.");
            $status = 1;
        }
        else {
            $status = system("ldmadmin printmetrics >>$metrics_file");

            if (!flock(METRICS_FILE, LOCK_UN)) {
                errmsg("addmetrics(): Couldn't unlock metrics-file \"$metrics_file\"");
                $status = 1;
            }
        }

        close(METRICS_FILE);
    } # METRICS_FILE is open
}
elsif ($command eq "plotmetrics") {
    while ($_ = $ARGV[0]) {
        shift;
        /^-b/ && ($begin = shift);
        /^-e/ && ($end = shift);
        /^-o/ && ($template = shift);
    }
    $status = plotMetrics();
}
elsif ($command eq "newmetrics") {
    $status = system("newlog $metrics_file $num_metrics");
}
elsif ($command eq "updategempaktables") {
    $status = system("updateGempakTables");
}
elsif ($command eq "showsettings") {  
    $status = system("showSettings");
}
elsif ($command eq "usage") {	# print usage message
    print_usage();
    $status = 0;
}
else {				# bad command
    errmsg("Unknown command: \"$command\"");
    print_usage();
    $status = 1;
}
#
# that's all folks
#
exit $status;

###############################################################################
# Date Routine.  Gets data and time as GMT in the same format as the LDM log
# file.
###############################################################################

sub get_date
{
    @month_array = (Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec);
 
    my($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
        gmtime(time());
 
    my($date_string) =
        sprintf("%s %d %02d:%02d:%02d UTC", $month_array[$mon], $mday,
                $hour, $min,$sec);
 
    return $date_string;
}

###############################################################################
# Print a usage message and exit.  Should only be called when the command is
# usage, or command line arguments are bad or missing.
###############################################################################

sub print_usage
{
    print "\
Usage: $progname command [arg ...]

commands:
    start [-v] [-x] [-m maxLatency] [-o offset] [-q q_path] [-M max_clients]
        [conf_file]                          Starts the LDM
    stop                                     Stops the LDM
    restart [-v] [-x] [-m maxLatency] [-o offset] [-q q_path] [-M max_clients]
        [conf_file]                          Restarts a running LDM
    mkqueue [-v] [-x] [-c] [-f] [-q q_path]  Creates a product-queue
    delqueue [-q q_path]                     Deletes a product-queue
    mksurfqueue [-v] [-x] [-c] [-f] [-q q_path]
                                             Creates a product-queue for
                                                 pqsurf(1)
    delsurfqueue [-q q_path ]                Deletes a pqsurf(1) product-queue
    newlog [-n numlogs] [-l logfile]         Rotates a log file
    scour  [-d]                              Scours data directories
    isrunning                                Exits status 0 if LDM is running
                                                 else exit 1
    checkinsertion                           Checks for recent insertion of
                                                 data-product into product-queue
    vetqueuesize                             Vets the size of the product-queue
    pqactcheck [ldmd_conf]                   Check the pqact(1) configuration files 
                                                 that are referenced in the LDM
                                                 configuration file, ldmd_conf, for 
                                                 errors.
                                                 Status messages are written to 
                                                 the standard-output stream.
                                                 This is the default if no argument 
                                                 is specified.
    pqactcheck [-p pqact_conf]               Check the pqact(1) configuration-file, 
                                                 pqact_conf, for errors.
                                                 Status messages are written to 
                                                 the standard-output stream.
                                                 If no option is specified, then 
                                                 the previous form is used.
    pqactHUP                                 Sends HUP signal to pqact(1)
                                                 program
    queuecheck                               Checks for product-queue corruption
    watch [-f feedset]                       Monitors incoming products
    config                                   Prints LDM configuration
    log                                      Pages through the LDM log file
    tail                                     Monitors the LDM log file
    checktime                                Checks the system clock
    clean                                    Cleans up after an abnormal
                                                 termination
    printmetrics                             Prints LDM metrics
    addmetrics                               Accumulates LDM metrics
    plotmetrics [-b begin] [-e end] [-o template]
                                             Plots LDM metrics
    newmetrics                               Rotates the metrics files
    showsettings                             Reveals current installation settings
    updategempaktables                       Updates the GEMPAK tables
    usage                                    Prints this message

options:
    -b begin        Begin time as YYYYMMDD[.hh[mm[ss]]]
    -c              Clobber an exisiting product-queue
    -d              Delete empty scoured directories
    -e end          End time as YYYYMMDD[.hh[mm[ss]]]
    -f              Create queue \"fast\"
    -f feedset      Feed-set to use with command. Default: $feedset
    -l logfile      Pathname of logfile. Default: $log_file
    -m maxLatency   Conditional data-request temporal-offset
    -M max_clients  Maximum number of active clients
    -n numlogs      Number of logs to rotate. Default: $numlogs
    -o offset       Unconditional data-request temporal-offset
    -o template     Plot metrics to files <template><plot_name>.png. Default
                    is to use X-server.
    -p pqact_conf   Specify a pqact config path. 
                    Default: valid pqact path(s) in EXEC \"pqact\" line(s)
                    in LDM config file,
                    LDM default: $pqact_path
    -q q_path       Specify a product-queue path. LDM Default: $pq_path,
                    pqsurf(1) default: $surf_path
    -v              Turn on verbose mode
    -x              Turn on debug mode (includes verbose mode)

conf_file:
    Which LDM configuration-file file to use. Default: $ldmd_conf
";
}

# Resets the LDM registry.
#
# Returns:
#       0               Success.
#       else            Failure.  "errmsg()" called.
#
sub resetRegistry
{
    my $status = 1;     # default failure

    if (system("regutil -R")) {
	errmsg("Couldn't reset LDM registry");
    }
    else {
        $status = 0;
    }

    return $status;
}

###############################################################################
# Lock the lock-file.
###############################################################################

sub getLock
{
    my $status = 0;     # default success

    if (!open(LOCKFILE,">$lock_file")) {
        errmsg("getLock(): Cannot create/open lock-file \"$lock_file\"");
        $status = 1;
    }
    else {
        if (!flock(LOCKFILE, LOCK_EX | LOCK_NB)) {
            errmsg("getLock(): Couldn't lock lock-file \"$lock_file\". ".
                    "Another ldmadmin(1) script is likely running.");
            $status = 1;
            close(LOCKFILE);
        }
    }

    return $status;
}

###############################################################################
# Unlock the lock file.
###############################################################################

sub releaseLock
{
    if (!flock(LOCKFILE, LOCK_UN)) {
        errmsg("releaseLock(): Couldn't unlock lock-file \"$lock_file\"");
    }

    close(LOCKFILE);
}

###############################################################################
# create a product queue
###############################################################################

sub make_pq
{
    my $status = 1;     # default failure

    if ($q_size) {
	errmsg("product queue -s flag not supported, no action taken.");
    }
    else {
        # Ensure the LDM system isn't running
        if (isRunning($pid_file, $ip_addr)) {
            errmsg("make_pq(): There is a server running, mkqueue aborted");
        }
        else {
            # Build the command line
            $cmd_line = "pqcreate";
            $cmd_line .= " -x" if ($debug);
            $cmd_line .= " -v" if ($verbose);
            $cmd_line .= " -c" if ($pq_clobber);
            $cmd_line .= " -f" if ($pq_fast);
            $cmd_line .= " -S $pq_slots" if ($pq_slots ne "default");
            $cmd_line .= " -q $pq_path -s $pq_size";

            # execute pqcreate(1)
            if (system("$cmd_line")) {
                errmsg("make_pq(): mkqueue(1) failed");
            }
            else {
                $status = 0;
            }
        }                           # LDM system not running
    }

    return 0;
}

###############################################################################
# Deletes a product-queue
###############################################################################

sub deleteQueue
{
    my $queuePath       = $_[0];
    my $status          = 1;     # default failure

    # Check to see if the server is running.
    if (isRunning($pid_file, $ip_addr)) {
        errmsg("deleteQueue(): The LDM is running, cannot delete the queue");
    }
    else {
        # Delete the queue
        if (! -e $queuePath) {
            errmsg("deleteQueue(): Product-queue \"$queuePath\" doesn't exist");
            $status = 0;
        }
        else {
            if (unlink($queuePath) != 1) {
                errmsg("deleteQueue(): Couldn't delete product-queue ".
                        "\"$queuePath\": $!");
            }
            else {
                $status = 0;
            }
        }
    }

    return $status;
}

###############################################################################
# create a pqsurf product queue
###############################################################################

sub make_surf_pq
{
    my $status = 1;                     # default failure

    if ($q_size) {
	errmsg("product queue -s flag not supported, no action taken.");
    }
    else {
        # can't do this while there is a server running
        if (isRunning($pid_file, $ip_addr)) {
            errmsg("make_surf_pq(): There is a server running, ".
                "mkqueue aborted");
        }
        else {
            my $size;
            if ($surf_size =~ /(.*)k$/i) {
                $size = $1 * 1000;
            }
            elsif ($surf_size =~ /(.*)M$/i) {
                $size = $1 * 1000000;
            }
            elsif ($surf_size =~ /(.*)G$/i) {
                $size = $1 * 1000000000;
            }
            else {
                $size = $surf_size;
            }

            # need the number of slots to create
            $surf_slots = $size / 1000000 * 6881;

            # build the command line
            $cmd_line = "pqcreate";

            if ($debug) {
                $cmd_line .= " -x";
            }
            if ($verbose) {
                $cmd_line .= " -v";
            }

            if ($pq_clobber) {
                $cmd_line .= " -c";
            }

            if ($pq_fast) {
                $cmd_line .= " -f";
            }

            $cmd_line .= " -S $surf_slots -q $surf_path -s $surf_size";

            # execute pqcreate
            if (system("$cmd_line")) {
                errmsg("make_surf_pq(): pqcreate(1) failure");
            }
            else {
                $status = 0;
            }
        }
    }

    return $status;
}

###############################################################################
# start the LDM server
###############################################################################

sub start
{
    my $status = 0;     # default success

    # Build the command line
    $cmd_line = "ldmd -I $ip_addr -P $port -M $max_clients -m $max_latency ".
        "-o $offset -q $pq_path";

    if ($debug) {
        $cmd_line .= " -x";
    }
    if ($verbose) {
        $cmd_line .= " -v";
    }

    # Check the ldm(1) configuration-file
    print "Checking LDM configuration-file ($ldmd_conf)...\n";
    my $prev_line_prefix = $line_prefix;
    $line_prefix .= "    ";
    ( @output ) = `$cmd_line -nvl- $ldmd_conf 2>&1` ;
    if ($?) {
        print "start(): Problem with LDM configuration-file:\n @output";
        $status = 1;
    }
    else {
        $line_prefix = $prev_line_prefix;

        print "Starting the LDM server...\n";
        system("$cmd_line $ldmd_conf > $pid_file");
        if ($?) {
            unlink($pid_file);
            errmsg("start(): Could not start LDM server");
            $status = 1;
        }
        else {
            # Check to make sure the LDM is running
            sleep(2);
            while(!isRunning($pid_file, $ip_addr)) {
                print "LDM didn't start (check log file?). Sleeping...\n";
                sleep(2);
            }
        }
    }

    return $status;
}

sub start_ldm
{
    my $status = 0;     # default success

    if (!correctInstall()) {
        $status = 1;
    }
    else {
        # Make sure there is no other server running
        #print "start_ldm(): Checking for running LDM\n";
        if (isRunning($pid_file, $ip_addr)) {
            errmsg("start_ldm(): There is another server running, ".
                "start aborted");
            $status = 1;
        }
        else {
            #print "start_ldm(): Checking for PID-file\n";
            if (-e $pid_file) {
                errmsg("start_ldm(): PID-file \"$pid_file\" exists.  ".
                    "Verify that all is well and then execute ".
                    "\"ldmadmin clean\" to clean up.");
                $status = 1;
            }
            else {
                # Check the queues
                #print "start_ldm(): Checking queues\n";
                if (!areQueuesOk())  {
                    $status = 1;
                }
                else {
                    # Ensure that the upstream LDM database doesn't exist
                    #print "Attempting to delete upstream LDM database...\n";
                    system("uldbutil -d");
                        
                    # Check the pqact(1) configuration-file(s)
                    print "Checking pqact(1) configuration-file(s)...\n";
                    my $prev_line_prefix = $line_prefix;
                    $line_prefix .= "    ";
                    if (!are_pqact_confs_ok()) {
                        errmsg("");
                        $status = 1;
                    }
                    else {
                        $line_prefix = $prev_line_prefix;

                        # Rotate the ldm log files if appropriate
                        system("mkdir -p `dirname $log_file`");
                        if ($log_rotate) {
                            #print "start_ldm(): Rotating log files\n";
                            if (new_log()) {
                                errmsg("start_ldm(): ".
                                    "Couldn't rotate log files");
                                $status = 1;
                            }
                        }

                        if (0 == $status) {
                            # Reset queue metrics
                            system("pqutil -C");

                            $status = start();
                        }
                    }                   # pqact(1) config-files OK
                }                       # product-queue OK
            }                           # PID-file doesn't exist
        }                               # LDM not running
    }                                   # LDM not installed correctly

    if ($status) {
        errmsg("LDM not started");
    }

    return $status;
}

###############################################################################
# stop the LDM server
###############################################################################

sub stop_ldm
{
    my $status = 0;                     # default success

    # get pid 
    my $rpc_pid = getPid($pid_file) ;

    if ($rpc_pid == -1) {
        errmsg("The LDM server isn't running or its process-ID is ".
            "unavailable");
        $status = 1;
    }
    else {
        # kill the server and associated processes
        print "Stopping the LDM server...\n";
        system( "kill $rpc_pid" );

        # we may need to sleep to make sure that the port is deregistered
        while(isRunning($pid_file, $ip_addr)) {
            sleep(1);
        }
    }

    if (0 == $status) {
        # remove product-information files that are older than the LDM pid-file.
        removeOldProdInfoFiles();

        # get rid of the pid file
        unlink($pid_file);
    }

    return $status;
}

###############################################################################
# rotate the specified log file, keeping $numlog files
###############################################################################

sub new_log
{
    my $status = 1;      # default failure

    # Rotate the log file
    system("newlog $log_file $numlogs");

    if ($?) {
	errmsg("new_log(): log rotation failed");
    }
    else {
        # Refresh logging
        system("refresh_logging");
        if ($?) {
            errmsg("new_log(): Couldn't refresh LDM logging");
        }
        else {
            $status = 0;        # success
        }
    }

    return $status;
}

###############################################################################
# print the LDM configuration information
###############################################################################

sub ldm_config
{
    print  "\n";
    print  "hostname:              $hostname\n";
    print  "os:                    $os\n";
    print  "release:               $release\n";
    print  "ldmhome:               $ldmhome\n";
    print  "LDM version:           @VERSION@\n";
    print  "PATH:                  $ENV{'PATH'}\n";
    print  "LDM conf file:         $ldmd_conf\n";
    print  "pqact(1) conf file:    $pqact_conf\n";
    print  "scour(1) conf file:    $scour_file\n";
    print  "product queue:         $pq_path\n";
    print  "queue size:            $pq_size bytes\n";
    print  "queue slots:           $pq_slots\n";
    print  "reconciliation mode:   $reconMode\n";
    print  "pqsurf(1) path:        $surf_path\n";
    print  "pqsurf(1) size:        $surf_size\n";
    printf "IP address:            %s\n", length($ip_addr) ? $ip_addr : "all";
    printf "port:                  %d\n", length($port) ? $port : @LDM_PORT@; 
    print  "PID file:              $pid_file\n";
    print  "Lock file:             $lock_file\n";
    print  "maximum clients:       $max_clients\n";
    print  "maximum latency:       $max_latency\n";
    print  "time offset:           $offset\n";
    print  "log file:              $log_file\n";
    print  "numlogs:               $numlogs\n";
    print  "log_rotate:            $log_rotate\n";
    print  "netstat:               $netstat\n";
    print  "top:                   $top\n";
    print  "metrics file:          $metrics_file\n";
    print  "metrics files:         $metrics_files\n";
    print  "num_metrics:           $num_metrics\n";
    print  "check time:            $check_time\n";
    print  "delete info files:     $delete_info_files\n";
    print  "ntpdate(1):            $ntpdate\n";
    print  "ntpdate(1) timeout:    $ntpdate_timeout\n";
    print  "time servers:          ", join(" ", @time_servers), "\n";
    print  "time-offset limit:     $check_time_limit\n";
    print "\n";

    return 0;
}

###############################################################################
# check that the LDM was installed correctly.
# return 1 if yes, 0 if no
###############################################################################

sub correctInstall
{
    my $success = 0;
    my $pathname = $ldmhome."/bin/ldmd";

    if (!-e $pathname) {
        errmsg("LDM program $pathname doesn't exist!");
    }
    else {
        chomp(my($line) = `ls -l $pathname`);

        if ($?) {
            errmsg("correctInstall(): ls(1) failure");
        }
        else {
            my @fields = split(/\s+/, $line);
            if ($fields[2] !~ /^root$/) {
                errmsg("correctInstall(): $pathname is owned by $fields[2]; ".
                    "not root. Was \"make root-actions\" executed?");
            }
            elsif ($fields[0] !~ /^-rws.*/) {
                errmsg("correctInstall(): $pathname isn't SETUID. ".
                    "Was \"make root-actions\" executed?");
            }
            else {
                $success = 1;
            }
        }
    }

    return $success;
}

###############################################################################
# check if the LDM is running.  return 1 if running, 0 if not.
###############################################################################

sub isRunning
{
    my $pid_file = $_[0];
    my $ip_addr = $_[1];
    my($running) = 0;
    my($pid) = getPid($pid_file);

    if ($pid != -1) {
        system("ps -p $pid | grep -w ldmd >/dev/null");
	$running = !$?;
    }

# The following test is incompatible with the use of a proxy
    if (!$running) {
	my($cmd_line) = "ldmping -l- -i 0 -t 1";
	$cmd_line = $cmd_line . " $ip_addr" if $ip_addr ne "0.0.0.0";

	system("$cmd_line > /dev/null 2>&1");
	$running = !$?;
    }

    return $running;
}

###############################################################################
# Check that a data-product has been inserted into the product-queue
###############################################################################

sub check_insertion
{
    my $status = 1;                     # default failure
    chomp(my($line) = `pqmon -S -q $pq_path`);

    if ($?) {
        errmsg("check_insertion(): pqmon(1) failure");
    }
    else {
        my @params = split(/\s+/, $line);
        my $age = $params[8];

        if ($age > $insertion_check_period) {
            errmsg("check_insertion(): The last data-product was inserted ".
                "$age seconds ago, which is greater than the registry-".
                "parameter \"regpath{INSERTION_CHECK_INTERVAL}\" ".
                "($insertion_check_period seconds).");
        }
        else {
            $status = 0;
        }
    }

    return $status;
}

###############################################################################
# Returns the elapsed time since the LDM server was started, in seconds.
#
# Returns:
#       -1      The LDM system isn't running.
#       else    The elapsed time since the LDM server was started, in seconds.
###############################################################################

sub getElapsedTimeOfServer
{
    if (isRunning($pid_file, $ip_addr)) {
        my @stats = stat($pid_file);

        return time() - $stats[9];
    }

    return -1;
}

###############################################################################
# Check the size of the queue.
###############################################################################

sub grow
{
    my $oldQueuePath = $_[0];
    my $newQueuePath = $_[1];
    my $status = 1;                     # failure default;

    print "Copying products from old queue to new queue...\n";
    if (system("pqcopy $oldQueuePath $newQueuePath")) {
        errmsg("grow(): Couldn't copy products");
    }
    else {
        print "Renaming old queue\n";
        if (system("mv -f $oldQueuePath $oldQueuePath.old")) {
            errmsg("grow(): Couldn't rename old queue");
        }
        else {
            print "Renaming new queue\n";
            if (system("mv $newQueuePath $oldQueuePath")) {
                errmsg("grow(): Couldn't rename new queue");
            }
            else {
                print "Deleting old queue\n";
                if (unlink($oldQueuePath.".old") != 1) {
                    errmsg("grow(): Couldn't delete old queue");
                }
                else {
                    $status = 0;        # success
                }
            }                           # new queue renamed

            if ($status) {
                print "Restoring old queue\n";
                if (system("mv -f $oldQueuePath.old $oldQueuePath")) {
                    errmsg("grow(): Couldn't restore old queue");
                }
            }
        }                               # old queue renamed
    }                                   # products copied

    return $status;
}

sub saveQueuePar
{
    my $size = $_[0];
    my $slots = $_[1];
    my $status = 1;                     # failure default

    if (system("regutil -u $size regpath{QUEUE_SIZE}")) {
        errmsg("saveQueuePar(): Couldn't save new queue size");
    }
    else {
        if (system("regutil -u $slots regpath{QUEUE_SLOTS}")) {
            errmsg("saveQueuePar(): Couldn't save queue slots");

            print "Restoring previous queue size\n";
            if (system("regutil -s $pq_size regpath{QUEUE_SIZE}")) {
                errmsg("saveQueuePar(): Couldn't restore previous queue size");
            }
        }
        else {
            $pq_size = $size;
            $pq_slots = $slots;
            $status = 0;                # success
        }
    }

    return $status;
}

sub saveTimePar
{
    my $newTimeOffset = $_[0];
    my $newMaxLatency = $_[1];
    my $status = 1;                     # failure default

    if (system("regutil -u $newTimeOffset regpath{TIME_OFFSET}")) {
        errmsg("saveTimePar(): Couldn't save new time-offset");
    }
    else {
        if (system("regutil -u $newMaxLatency regpath{MAX_LATENCY}")) {
            errmsg("saveTimePar(): Couldn't save new maximum acceptable ".
                "latency");

            print "Restoring previous time-offset\n";
            if (system("regutil -u $offset regpath{TIME_OFFSET}")) {
                errmsg("saveTimePar(): Couldn't restore previous time-offset");
            }
        }
        else {
            $offset = $newTimeOffset;
            $max_latency = $newMaxLatency;
            $status = 0;                # success
        }
    }

    return $status;
}

# Returns new size parameters for the product-queue
#
# Arguments:
#       minVirtResTime          The minimum virtual residence time in seconds.
#       oldestProductAge        The age of the oldest product in the queue in
#                               seconds.
#       mvrtSize                The amount of space used in the queue for data
#                               in bytes.
#       mvrtSlots               The number of slots used in the queue for 
#                               products.
# Returns:
#       [0]                     The new size for the queue in bytes.
#       [1]                     The new number of slots for the queue.
sub computeNewQueueSize
{
    my $minVirtResTime = $_[0];
    my $oldestProductAge = $_[1];
    my $mvrtSize = $_[2];
    my $mvrtSlots = $_[3];

    if (0 >= $minVirtResTime) {
        # Use age of oldest product, instead
        $minVirtResTime = $oldestProductAge;
    }
    my $newByteCount;
    my $newSlotCount;
    if (0 < $minVirtResTime) {
        my $ratio = $max_latency/$minVirtResTime;
        $newByteCount = int($ratio*$mvrtSize);
        $newSlotCount = int($ratio*$mvrtSlots);
    }
    else {
        # Insufficient data
        $newByteCount = $mvrtSize;   # Don't change
        $newSlotCount = $mvrtSlots;  # Don't change
    }

    return ($newByteCount, $newSlotCount);
}

# Returns
#       0       Success. Nothing wrong or it's too soon to tell.
#       1       The LDM isn't running
#       2       The queue is too small or the maximum-latency parameter is
#               too large.
#       3       Major failure.
sub vetQueueSize
{
    my $status = 3;                     # default major failure
    my $etime = getElapsedTimeOfServer();

    if ($etime < 0) {
        errmsg("vetQueueSize(): The LDM isn't running");
        $status = 1;
    }
    elsif ($etime < $max_latency) {
        errmsg("vetQueueSize(): The LDM must run for at least $max_latency ".
                "seconds");
        $status = 0;                    # too soon to tell
    }
    else {
        chomp(my $line = `pqmon -S -q $pq_path`);

        if ($?) {
            errmsg("vetQueueSize(): pqmon(1) failure");
            $status = 3;                # major failure
        }
        else {
            my @params = split(/\s+/, $line);
            my $isFull = $params[0];
            my $ageOldest = $params[7];
            my $minVirtResTime = $params[9];
            my $mvrtSize = $params[10];
            my $mvrtSlots = $params[11];

            if (!$isFull || $minVirtResTime < 0 
                    || $minVirtResTime >= $max_latency
                    || $mvrtSize <= 0 || $mvrtSlots <= 0) {
                $status = 0;            # reconciliation not needed
            }
            else {
                my $increaseQueue = "increase queue";
                my $decreaseMaxLatency = "decrease maximum latency";
                my $doNothing = "do nothing";

                errmsg("vetQueueSize(): The maximum acceptable latency ".
                    "(registry parameter \"regpath{MAX_LATENCY}\": ".
                    "$max_latency seconds) is greater ".
                    "than the observed minimum virtual residence time of ".
                    "data-products in the queue ($minVirtResTime seconds).  ".
                    "This will hinder detection of duplicate data-products.");

                print "The value of the ".
                    "\"regpath{RECONCILIATION_MODE}\" registry-parameter is ".
                    "\"$reconMode\"\n";

                if ($reconMode eq $increaseQueue) {
                    my @newParams = computeNewQueueSize($minVirtResTime, 
                            $ageOldest, $mvrtSize, $mvrtSlots);
                    my $newByteCount = $newParams[0];
                    my $newSlotCount = $newParams[1];
                    my $newQueuePath = "$pq_path.new";

                    errmsg("vetQueueSize(): Increasing the capacity of the ".
                            "queue to $newByteCount bytes and $newSlotCount ".
                            "slots...");

                    if (system("pqcreate -c -S $newSlotCount -s $newByteCount ".
                            "-q $newQueuePath")) {
                        errmsg("vetQueueSize(): Couldn't create new queue: ".
                            "$newQueuePath");
                        $status = 3;            # major failure
                    }
                    else {
                        my $restartNeeded;

                        $status = 0;            # success so far

                        if (!isRunning($pid_file, $ip_addr)) {
                            $restartNeeded = 0;
                        }
                        else {
                            if (stop_ldm()) {
                                $status = 3;        # major failure
                            }
                            else {
                                $restartNeeded = 1;
                            }
                        }
                        if (0 == $status) {
                            if (grow($pq_path, $newQueuePath)) {
                                $status = 3;        # major failure
                            }
                            else {
                                print "Saving new queue parameters...\n";
                                if (saveQueuePar($newByteCount,
                                            $newSlotCount)) {
                                    $status = 3;    # major failure
                                }
                            }

                            if ($restartNeeded) {
                                print "Restarting the LDM...\n";
                                if (start_ldm()) {
                                    errmsg("vetQueueSize(): ".
                                        "Couldn't restart the LDM");
                                    $status = 3;    # major failure
                                }
                            }
                        }               # LDM stopped
                    }                   # new queue created

                    system("pqutil -C");# reset queue metrics
                }                       # mode is increase queue
                elsif ($reconMode eq $decreaseMaxLatency) {
                    if (0 >= $minVirtResTime) {
                        # Use age of oldest product, instead
                        $minVirtResTime = $ageOldest;
                    }
                    $minVirtResTime = 1 if (0 >= $minVirtResTime);
                    my $newMaxLatency = $minVirtResTime;
                    my $newTimeOffset = $newMaxLatency;

                    errmsg("vetQueueSize(): Decreasing the maximum acceptable ".
                        "latency and the time-offset of requests (registry ".
                        "parameters \"regpath{MAX_LATENCY}\" and ".
                        "\"regpath{TIME_OFFSET}\") to $newTimeOffset ".
                        "seconds...");

                    print "Saving new time parameters...\n";
                    if (saveTimePar($newTimeOffset, $newMaxLatency)) {
                        $status = 3;    # major failure
                    }
                    else {
                        if (!isRunning($pid_file, $ip_addr)) {
                            $status = 0;# success
                        }
                        else {
                            print "Restarting the LDM...\n";
                            if (stop_ldm()) {
                                errmsg("vetQueueSize(): Couldn't stop LDM");
                                $status = 3;        # major failure
                            }
                            else {
                                if (start_ldm()) {
                                    errmsg("vetQueueSize(): ".
                                            "Couldn't start LDM");
                                    $status = 3;    # major failure
                                }
                                else {
                                    $status = 0     # success
                                }
                            }           # LDM stopped
                        }               # LDM is running
                    }                   # new time parameters saved

                    system("pqutil -C");# reset queue metrics
                }                       # mode is decrease max latency
                elsif ($reconMode eq $doNothing) {
                    my @newParams = computeNewQueueSize($minVirtResTime,
                            $ageOldest, $mvrtSize, $mvrtSlots);
                    my $newByteCount = $newParams[0];
                    my $newSlotCount = $newParams[1];
                    errmsg("vetQueueSize(): The queue should be $newByteCount ".
                        "bytes in size with $newSlotCount slots or the ".
                        "maximum-latency parameter should be decreased to ".
                        "$minVirtResTime seconds. You should set ".
                        "registry-parameter \"regpath{RECONCILIATION_MODE}\" ".
                        "to \"$increaseQueue\" or \"$decreaseMaxLatency\" or ".
                        "manually adjust the relevant registry parameters and ".
                        "recreate the queue.");
                    $status = 2;        # small queue or big max-latency
                }
                else {
                    errmsg("Unknown reconciliation mode: \"$reconMode\"");
                    $status = 3;        # major failure
                }
            }                           # reconciliation needed
        }                               # pqmon(1) success
    }                                   # queue has reached equilibrium

    return $status;
}

###############################################################################
# Check the LDM system.
###############################################################################

sub check_ldm
{
    my $status;

    print "Checking for a running LDM system...\n";
    if (!isRunning($pid_file, $ip_addr)) {
        errmsg("The LDM server is not running");
        $status = 2;
    }
    else {
        print "Checking the system clock...\n";
        if (checkTime()) {
            $status = 3;
        }
        else {
            print "Checking the most-recent insertion into the queue...\n";
            if (check_insertion()) {
                $status = 4;
            }
            else {
                print "Vetting the size of the queue against the maximum ".
                    "acceptable latency...\n";
                if (vetQueueSize()) {
                    $status = 5;
                }
                else {
                    $status = 0;
                }
            }
        }
    }

    return $status;
}

###############################################################################
# get PID number.  return pid or -1
###############################################################################

sub getPid
{
    my $pid_file = $_[0];
    my( $i, @F, $pid_num ) ;

    if (-e $pid_file) {
	    open(PIDFILE,"<$pid_file");
	    $pid_num = <PIDFILE>;
	    chomp( $pid_num );
	    close( PIDFILE ) ;
	    return $pid_num if( $pid_num =~ /^\d{1,6}/ ) ;
    }
    return -1;
}

###############################################################################
# Check the pqact.conf file(s) for errors
###############################################################################

sub are_pqact_confs_ok
{
    my $are_ok = 1;
    my @pathnames = ();

    if ($pqact_conf_option) {
	# A "pqact" configuration-file was specified on the command-line.
	@pathnames = ($pqact_conf);
    }
    else {
	# No "pqact" configuration-file was specified on the command-line.
	# Set "@pathnames" according to the "pqact" configuration-files
	# specified in the LDM configuration-file.
	if (!open(LDM_CONF_FILE, "<$ldmd_conf")) {
	    errmsg("Could not open LDM configuration-file, $ldmd_conf");
            $are_ok = 0;
	}
	else {
	    while (<LDM_CONF_FILE>) {
		if (/^exec/i && /pqact/) {
		    chomp;
		    s/^exec\s+"?\s*//i;
		    s/\s*"\s*$//;

		    my @fields = split;
		    my $pathname;

		    if (($#fields == 0) ||
			    ($fields[$#fields] =~ /^-/) ||
			    ($fields[$#fields-1] =~ /^-[ldqfpito]/)) {
		    	$pathname = $pqact_conf;
		    }
		    else {
			$pathname = $fields[$#fields];
		    }
		    @pathnames = (@pathnames, $pathname);
		}
	    }

	    close(LDM_CONF_FILE);
	}
    }

    if ($are_ok) {
    for my $pathname (@pathnames) {
	# Examine the "pqact" configuration-file for leading spaces.
	my @output;
	my $leading_spaces = 0;

	print "$line_prefix$pathname: ";

	( @output ) = `grep -n "^ " $pathname 2> /dev/null` ;
	if ($#output >= 0) {
	    print "remove leading spaces in the following:\n" ;

	    my $prev_line_prefix = $line_prefix;
	    $line_prefix .= "    ";

	    for my $line (@output) {
		print "$line_prefix$line";
	    }

	    $line_prefix = $prev_line_prefix;
	    $leading_spaces = 1;
	}

	if ($leading_spaces) {
	    $are_ok = 0;
	}
	else {
	    # Check the syntax of the "pqact" configuration-file via "pqact".
	    my $read_ok = 0;

	    ( @output ) = `pqact -vl - -q /dev/null $pathname 2>&1` ;

	    for my $line (@output) {
		if ($line =~ /Successfully read/) {
		    $read_ok = 1;
		    last;
		}
	    }

	    if ($read_ok) {
		print "syntactically correct\n" ;
	    }
	    else {
		print "has problems:\n" ;

		my $prev_line_prefix = $line_prefix;
		$line_prefix .= "    ";

		for my $line (@output) {
		    print "$line_prefix$line";
		}

		$line_prefix = $prev_line_prefix;
		$are_ok = 0;
	    }
	}
    }
    }

    return $are_ok;
}

###############################################################################
# HUP the pqact program(s)
###############################################################################

sub ldmadmin_pqactHUP
{
    my $status = 0;
    my $cmd;

    if ($os eq "SunOS" && $release =~ /^4/) {
        $cmd = "ps -gawxl";
        $default = 0 ;
    } elsif ($os =~ /BSD/i) {
        $cmd = "ps ajx";
        $default = 1 ;
    } else {
        $cmd = "ps -fu $ENV{'USER'}";
        $default = 1 ;
    }

    if (!open( IN, "$cmd |" )) {
        errmsg("ldmadmin_pqactHUP: Cannot open ps(1)");
        $status = 1;
    }
    else {
        # each platform has fields in different order, looking for PID
        $_ = <IN> ;
        s/^\s*([A-Z].*)/$1/ ;
        $index = -1 ;
        ( @F ) = split( /[ \t]+/, $_ ) ;
        for( $i = 0; $i <= $#F; $i++ ) {
                next if( $F[ $i ] =~ /PPID/i ) ;
                if( $F[ $i ] =~ /PID/i ) {
                        $index = $i ;
                        last ;
                }
        }
        $index = $default if( $index == -1 ) ;

        @F = ( ) ;
        # Search through all processes, looking for "pqact".  Only processes
        # that are owned by the user will respond to the HUP signal.
        while( <IN> ) {
                next unless( /pqact/ ) ;
                s/^\s*([a-z0-9].*)/$1/ ;
                ( @F ) = split( /[ \t]+/, $_ ) ;
            $pqactPid .= " $F[ $index ]" ;
        }
        close( IN ) ;

        if ($pqactPid eq "") {
              errmsg("ldmadmin_pqactHUP: process not found, cannot HUP pqact");
        } else {
              print "Check pqact HUP with command \"ldmadmin tail\"\n" ;
              system( "kill -HUP $pqactPid" );
        }
    }

    return $status;
}

###############################################################################
# Check a queue-file for errors
###############################################################################

sub getQueueStatus
{
    my $queue_path = $_[0];
    my $name = $_[1];
    print "Checking the $name-queue...\n";
    my($status) = system("pqcheck -q $queue_path 2>/dev/null") >> 8;

    if (1 == $status) {
        if (-e $pid_file) {
            errmsg(
                "Couldn't check $queue_path. Execute pqcheck(1) manually.");
        }
        else {
            errmsg(
                "$queue_path doesn't exist. Execute \"ldmadmin mkqueue\".");
        }
    }
    elsif (2 == $status) {
	errmsg(
	    "The $name-queue doesn't have a writer-counter.  Using " .
	    "\"pqcheck -F\" to create one...");
	system("pqcheck -F -q $queue_path");
	if ($?) {
	    errmsg("Couldn't add writer-counter to $name-queue.");
	}
	else {
	    $status = 0;
	}
    }
    elsif (3 == $status) {
	errmsg(
	    "The writer-counter of the $name-queue isn't zero.  Either " .
	    "a process has the product-queue open for writing or the queue " .
	    "might be corrupt.  Terminate the process and recheck or use\n" .
	    "    pqcat -l- -s -q $queue_path && pqcheck -F -q $queue_path\n" .
	    "to validate the queue and set the writer-counter to zero.");
    }
    return $status;
}

###############################################################################
# Check the product-queue file for errors
###############################################################################

sub isProductQueueOk
{
    my $status = getQueueStatus($pq_path, "product");

    if (4 == $status) {
	errmsg(
	    "The product-queue is corrupt.  Use\n" .
	    "    ldmadmin delqueue && ldmadmin mkqueue\n" .
	    "to remove and recreate it.");
    }
    return $status == 0;
}

###############################################################################
# Check the surf-queue file for errors
###############################################################################

sub isSurfQueueOk
{
    my $path = $_[0];
    my $status = getQueueStatus($path, "surf");

    if (4 == $status) {
	errmsg(
	    "The surf-queue is corrupt.  Use\n" .
	    "    ldmadmin delsurfqueue -q $path && ldmadmin mksurfqueue -q $path\n" .
	    "to remove and recreate it.");
    }
    return $status == 0;
}

###############################################################################
# Check the queue-files for errors
###############################################################################

sub areQueuesOk
{
    my $areOk = isProductQueueOk();

    if ($areOk) {
	if (!open(LDM_CONF_FILE, "<$ldmd_conf")) {
	    errmsg("Could not open LDM configuration-file, $ldmd_conf");
            $areOk = 0;
	}
	else {
	    while (<LDM_CONF_FILE>) {
		if (/^exec/i && /pqsurf/) {
		    chomp;
		    s/^exec\s+"\s*//i;
		    s/\s*"\s*$//;
		    
		    # ()-s around $pathname are necessary
		    my ($pathname) = $_ =~ /-Q *([^ ]*)/;
		    if (!$pathname) {
		        $pathname = $surf_path;
                    }
                    
                    $areOk = isSurfQueueOk($pathname);
                    
                    if (!$areOk) {
                        last;
                    }
		}
	    }

	    close(LDM_CONF_FILE);
	}
    }
    return $areOk;
}

###############################################################################
# Remove product-information files that are older than the LDM pid-file.
###############################################################################

sub removeOldProdInfoFiles
{
    system("find .*.info -prune \! -newer $pid_file 2>/dev/null | xargs rm -f");
}

###############################################################################
# Check the system clock
###############################################################################

sub checkTime
{
    my $failure = 1;

    if (!$check_time) {
	if ($warn_if_check_time_disabled) {
	    errmsg("\n".
		"WARNING: The checking of the system clock is disabled.  ".
		"You might loose data if the clock is off.  To enable this ".
		"checking, execute the command \"regutil -u 1 ".
                "regpath{CHECK_TIME}\".");
	}
	$failure = 0;
    }
    else {
	if ($#time_servers < 0) {
	    errmsg("\nWARNING: No time-servers are specified by the registry ".
		"parameter \"regpath{NTPDATE_SERVERS}\". Consequently, the ".
		"system clock can't be checked and you might loose data if ".
		"it's off.");
	}
	else {
	    my @hosts = @time_servers;
	    while ($#hosts >= 0) {
		my $i = int(rand(scalar(@hosts)));
		my $timeServer = $hosts[$i];
		@hosts = (@hosts[0 .. ($i-1)], @hosts[($i+1) .. $#hosts]);
		my $timeCmd = $ntpdate;
		if ($timeCmd =~ /ntpdate/) {
		    $timeCmd .= " -q -t $ntpdate_timeout $timeServer";
		}
		elsif ($timeCmd =~ /chronyd/) {
		    $timeCmd .= " -Q 'server $timeServer iburst'";
		}
		else {
		    errmsg("\n".
		        "Time utility \"$ntpdate\" isn't supported. ".
                        "Execute the command \"regutil -s <path> ".
                        "regpath{NTPDATE_COMMAND}\" to set the pathname of ".
                        "the time utility to \"ntpdate\" or \"chronyd\".");
		    last;
		}
		if (!open(NTPDATE, "$timeCmd 2>&1 |")) {
		    errmsg("\n".
			"Couldn't execute the time utility \"$ntpdate\": $!.  ".
                        "Execute the command \"regutil -s <path> ".
                        "regpath{NTPDATE_COMMAND}\" to set the pathname of ".
                        "the time utility to <path>.");
		    last;
		}
		else {
		    my $offset;
		    while (<NTPDATE>) {
			if (/ [+-]?(\d*\.\d*) sec/) {
#			if (/offset\s+([+-]?\d*\.\d*)/) {
			    $offset = $1;
			    last;
			}
		    }
		    close NTPDATE;
		    if (length($offset) == 0) {
			errmsg("\n".
			    "Couldn't get time from time-server at ".
			    "$timeServer using utility, ".
			    "\"$ntpdate\".  ".
			    "If the utility is valid and this happens often, ".
			    "then remove $timeServer ".
			    "from registry parameter ".
                            "\"regpath{NTPDATE_SERVERS}\".");
		    }
		    else {
			if (abs($offset) > $check_time_limit) {
			    errmsg("\n".
				"The system clock is more than ".
				"$check_time_limit seconds off, which is ".
				"specified by registry parameter ".
				"\"regpath{CHECK_TIME_LIMIT}\".");
			}
			else {
			    $failure = 0;
			}
			last;
		    }
		}
	    }
	}
	if ($failure) {
	    errmsg("\n".
		"You should either fix the problem (recommended) or disable ".
		"time-checking by executing the command ".
                "\"regutil -u 0 regpath{CHECK_TIME}\" (not recommended).");
	}
    }
    return $failure;
}

###############################################################################
# Metrics:
###############################################################################

# Command for getting a UTC timestamp:
sub getTime
{
    chomp(my($time) = `date -u +%Y%m%d.%H%M%S`);
    return $time;
}
#
# Command for getting the running 1, 5, and 15 minute load averages:
sub getLoad
{
    chomp(my($output) = `uptime`);
    return (split(/,?\s+/, $output))[-3, -2, -1];
}
#
# Command for getting the number of connections to the LDM port (remote, local):
sub getPortCount
{
    my($totalCount) = 0;
    open(FH, $netstat."|") or die "Can't fork() netstat(1): $!";
    while (<FH>) {
	if (/ESTAB/ && /:$port\W/) {
	    $totalCount++;
	}
    }
    (close FH || !$!) or die "Can't close(): status=$?";
    my($lclCount) = 0;
    open(FH, "uldbutil 2>/dev/null |") or die "Can't fork() uldbutil(1): $!";
    while (<FH>) {
        $lclCount++;
    }
    (close FH || !$!) or die "Can't close(): status=$?";
    my $rmtCount = $totalCount - $lclCount;
    if ($rmtCount < 0) {
        $rmtCount = 0;
    }
    return ($rmtCount, $lclCount);
}
#
# Command for getting product-queue metrics (age, #prods, #bytes):
sub getPq
{
    my($age) = -1;
    my($prodCount) = -1;
    my($byteCount) = -1;
    open(FH, "pqmon -S -q $pq_path |") or die "Can't fork() pqmon(1): $!";
    while (<FH>) {
	my(@fields) = split(/\s+/);
        $age = $fields[7];
        $prodCount = $fields[6];
        $byteCount = $fields[3];
    }
    (close FH || !$!) or die "Can't close(): status=$?";
    return ($age, $prodCount, $byteCount);
}
#
# Command for getting space-usage metrics:
#
sub getCpu
{
    my($userTime) = -1;
    my($sysTime) = -1;
    my($idleTime) = -1;
    my($waitTime) = -1;
    my($memUsed) = -1;
    my($memFree) = -1;
    my($swapUsed) = -1;
    my($swapFree) = -1;
    my($contextSwitches) = -1;
    my($haveMem) = 0;
    my($haveSwap) = 0;

    if (open(FH, $top."|")) {
        while (<FH>) {
            if (/^mem/i) {
                s/k/e3/gi;
                s/m/e6/gi;
                s/g/e9/gi;
                $memUsed = $1 if /([[:digit:]]+(e\d)?) used/i;
                $memUsed = $1 if /([[:digit:]]+(e\d)?) phys/i;
                $memFree = $1 if /([[:digit:]]+(e\d)?) free/i;
                if ($memUsed < 0 && $memFree >= 0 && /([[:digit:]]+(e\d)?) real/i) {
                    $memUsed = $1 - $memFree;
                }
                $haveMem = 1;
                if (/swap/) {
                    if (/([[:digit:]]+(e\d)?) (free swap|swap free)/i) {
                        $swapFree = $1;
                    }
                    if (/([[:digit:]]+(e\d)?) (total )?swap/i) {
                        $swapUsed = $1 - $swapFree;
                    }
                    if (/([[:digit:]]+(e\d)?) swap in use/i) {
                        $swapUsed = $1;
                    }
                    $haveSwap = 1;
                }
            }
            elsif (/^swap/i) {
                s/k/e3/gi;
                s/m/e6/gi;
                s/g/e9/gi;
                /([[:digit:]]+(e\d)?) used/i;	$swapUsed = $1;
                /([[:digit:]]+(e\d)?) free/i;	$swapFree = $1;
                $haveSwap = 1;
            }
            last if ($haveMem && $haveSwap);
        }
        (close FH || !$!) or die "Can't close(): status=$?";
    }
    
    # If unsuccessful getting memory and swap usage from top(1), try using
    # free(1)
    if (!$haveMem || !$haveSwap) {
        if (open(FH, "free -b |")) {
            while (<FH>) {
                if (/^Mem:/i) {
                    my(@fields) = split(/\s+/);
                    $memUsed = $fields[2];
                    $memFree = $fields[3];
                }
                if (/^Swap:/i) {
                    my(@fields) = split(/\s+/);
                    $swapUsed = $fields[2];
                    $swapFree = $fields[3];
                }
            }
            (close FH || !$!) or die "Can't close(): status=$?";
        }
    }

    my($csIndex) = -1;
    my($usIndex) = -1;
    my($syIndex) = -1;
    my($idIndex) = -1;
    my($waIndex) = -1;
    my($line) = "";
    open(FH, "vmstat 1 2|") or die "Can't fork() vmstat(1): $!";
    while (<FH>) {
	my(@fields) = split(/\s+/);
	for (my($i) = 0; $i <= $#fields; ++$i) {
	    if ($csIndex < 0 && $fields[$i] eq "cs") {
		$csIndex = $i;
	    }
	    elsif ($usIndex < 0 && $fields[$i] eq "us") {
		$usIndex = $i;
	    }
	    elsif ($fields[$i] eq "sy") {
                # The vmstat(1) on SunOS, HP-UX, and AIX emits 2 "sy" fields.
                # The CPU percentage is the last one.
		$syIndex = $i;
	    }
	    elsif ($idIndex < 0 && $fields[$i] eq "id") {
		$idIndex = $i;
	    }
	    elsif ($waIndex < 0 && $fields[$i] eq "wa") {
		$waIndex = $i;
	    }
	}
	$line = $_
    }
    (close FH || !$!) or die "Can't close(): status=$?";
    my(@fields) = split(/\s+/, $line);
    ($contextSwitches = $fields[$csIndex]) if $csIndex >= 0;
    ($sysTime = $fields[$syIndex]) if $syIndex >= 0;
    ($userTime = $fields[$usIndex]) if $usIndex >= 0;
    ($idleTime = $fields[$idIndex]) if $idIndex >= 0;
    ($waitTime = $fields[$waIndex]) if $waIndex >= 0;

    return ($userTime, $sysTime, $idleTime, $waitTime, 
	$memUsed, $memFree, $swapUsed, $swapFree, $contextSwitches);
}
#
# Command for printing metrics:
sub printMetrics
{
    print join(' ', getTime(), getLoad(), getPortCount(), getPq(), getCpu());
    print "\n";
    return $?;
}
#
# Command for plotting metrics:
sub plotMetrics
{
    if ($template) {
        return system("plotMetrics -b $begin -e $end -o $template $metrics_files");
    }
    else {
        return system("plotMetrics -b $begin -e $end $metrics_files");
    }
}

###############################################################################
# Print an error-message
###############################################################################

sub errmsg
{
    $SIG{PIPE} = 'IGNORE';
    open(FH, "|fmt 1>&2")	or die "Can't fork() fmt(1): $!";
    print FH @_			or die "Can't write(): $!";
    close FH			or die "Can't close(): status=$?";
}
