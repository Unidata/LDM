/*
 *   See file ../COPYRIGHT for copying and redistribution conditions.
 */
#ifndef _LDM_SERVER_GLOBAL_H
#define _LDM_SERVER_GLOBAL_H

/*
 * Unless otherwise noted, globals are
 * declared (and initialized) in ldmd.c
 */

#include <netinet/in.h> // in_addr_t
#include <stdbool.h>
#include <signal.h>   /* sig_atomic_t */

#ifdef __cplusplus
extern "C" {
#endif

extern const char *conf_path;
extern volatile sig_atomic_t done;
extern const char *logfname;

/**
 * Did the remote process use the HIYA protocol data unit? If so, then it likely used ldmsend(3)
 * (e.g., rtstats(1), ldmsend(1), pqsend(1)) and is relying on a matching ACCEPT entry in the LDM
 * configuration-file.
 */
extern bool hiyaCalled;

/* timeout for rpc calls */
#ifndef DEFAULT_RPCTIMEO
#  define DEFAULT_RPCTIMEO  60
#endif
extern unsigned int rpctimeo;

/* time we sleep in pq_suspend() and before retrying connects */
extern unsigned int interval;

/*
 * Shut down a service connection that has been idle this long.
 * The keepalive timeout (for the other end) is
 * inactive_timeo/2 - 2 * interval;
 */
extern const int inactive_timeo;

/*
 * In requests,
 * we set 'from' to 'toffset' ago, and it may get
 * trimmed by  pq_clss_setfrom();
 */
#ifndef DEFAULT_OLDEST
#  define DEFAULT_OLDEST  3600
#endif
extern int max_latency;
extern int toffset;

extern void clr_pip_5(void);	        // defined in svc5.c
extern int read_conf(                   // defined in "parser.y"
    const char* const   pathname,
    int                 execEntries,
    in_addr_t           ldmAddr,
    unsigned            defaultPort);

@FUNCTION_DECLARATIONS@

#ifdef __cplusplus
}
#endif

#endif /*!_LDM_SERVER_GLOBAL_H*/
