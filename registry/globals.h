/* DO NOT EDIT THIS FILE. It was created by extractDecls */
/*
 *   See file ../COPYRIGHT for copying and redistribution conditions.
 */
#ifndef _LDM_SERVER_GLOBAL_H
#define _LDM_SERVER_GLOBAL_H

/*
 * Unless otherwise noted, globals are
 * declared (and initialized) in ldmd.c
 */

#include <netinet/in.h> // in_addr_t
#include <stdbool.h>
#include <signal.h>   /* sig_atomic_t */

#ifdef __cplusplus
extern "C" {
#endif

extern const char *conf_path;
extern volatile sig_atomic_t done;
extern const char *logfname;

/**
 * Did the remote process use the HIYA protocol data unit? If so, then it likely used ldmsend(3)
 * (e.g., rtstats(1), ldmsend(1), pqsend(1)) and is relying on a matching ACCEPT entry in the LDM
 * configuration-file.
 */
extern bool hiyaCalled;

/* timeout for rpc calls */
#ifndef DEFAULT_RPCTIMEO
#  define DEFAULT_RPCTIMEO  60
#endif
extern unsigned int rpctimeo;

/* time we sleep in pq_suspend() and before retrying connects */
extern unsigned int interval;

/*
 * Shut down a service connection that has been idle this long.
 * The keepalive timeout (for the other end) is
 * inactive_timeo/2 - 2 * interval;
 */
extern const int inactive_timeo;

/*
 * In requests,
 * we set 'from' to 'toffset' ago, and it may get
 * trimmed by  pq_clss_setfrom();
 */
#ifndef DEFAULT_OLDEST
#  define DEFAULT_OLDEST  3600
#endif
extern int max_latency;
extern int toffset;

extern void clr_pip_5(void);	        // defined in svc5.c
extern int read_conf(                   // defined in "parser.y"
    const char* const   pathname,
    int                 execEntries,
    in_addr_t           ldmAddr,
    unsigned            defaultPort);

/*
 * Calls exit() if the "done" global variable is set; othewise, returns 1 so
 * that it can be easily used in programming loops.
 *
 * Arguments:
 *      status  Exit status for the call to exit().
 * Returns:
 *      1
 */
int exitIfDone(
    const int   status);

/**
 * Returns the default pathname of the product-queue. Obtains the pathname from
 * the registry if available; otherwise, the configure-time pathname is used.
 *
 * @retval NULL  Error.  "log_add()" called.
 * @return       Pointer to the default pathname of the product-queue. Might be
 *               absolute or relative to the current working directory.
 */
const char* getDefaultQueuePath(void);

/*
 * Sets the path name of the product-queue.
 *
 * Arguments:
 *      path            Pointer to the path name of the product-queue.
 *                      Shall not be NULL.  Can be absolute or relative to the
 *                      current working directory.
 */
void setQueuePath(
    const char* const   path);

/**
 * Returns the path name of the product-queue.
 *
 * @retval NULL  Error.  "log_add()" called.
 * @return       Pointer to the pathname of the product-queue. Might be absolute
 *               or relative to the current working directory.
 */
const char* getQueuePath(void);

/*
 * Sets the path name of the default pqact(1) configuration-file for the
 * duration of the process.
 *
 * Arguments:
 *      path            Pointer to the path name.  Shall not be NULL.  Can be
 *                      absolute or relative to the current working directory.
 */
void setPqactConfigPath(
    const char* const   path);

/*
 * Returns the path name of the default pqact(1) configuration-file.
 *
 * Returns:
 *      NULL            Error.  "log_add()" called.
 *      else            Pointer to the pathname.  Might be absolute or relative
 *                      to the current working directory.
 */
const char* getPqactConfigPath(void);

/*
 * Sets the path name of the ldmd(1) configuration-file for the
 * duration of the process.
 *
 * Arguments:
 *      path            Pointer to the path name.  Shall not be NULL.  Can be
 *                      absolute or relative to the current working directory.
 */
void setLdmdConfigPath(
    const char* const   path);

/*
 * Returns the path name of the ldmd(1) configuration-file.
 *
 * Returns:
 *      NULL            Error.  "log_add()" called.
 *      else            Pointer to the pathname.  Might be absolute or relative
 *                      to the current working directory.
 */
const char* getLdmdConfigPath(void);

/*
 * Sets the path name of the default pqact(1) data-directory for the
 * duration of the process.
 *
 * Arguments:
 *      path            Pointer to the path name.  Shall not be NULL.  Can be
 *                      absolute or relative to the current working directory.
 */
void setPqactDataDirPath(
    const char* const   path);

/*
 * Returns the path name of the default pqact(1) data-directory.
 *
 * Returns:
 *      NULL            Error.  "log_add()" called.
 *      else            Pointer to the pathname.  Might be absolute or relative
 *                      to the current working directory.
 */
const char* getPqactDataDirPath(void);

/*
 * Sets the path name of the default pqsurf(1) data-directory for the
 * duration of the process.
 *
 * Arguments:
 *      path            Pointer to the path name.  Shall not be NULL.  Can be
 *                      absolute or relative to the current working directory.
 */
void setPqsurfDataDirPath(
    const char* const   path);

/*
 * Returns the path name of the default pqsurf(1) data-directory.
 *
 * Returns:
 *      NULL            Error.  "log_add()" called.
 *      else            Pointer to the pathname.  Might be absolute or relative
 *                      to the current working directory.
 */
const char* getPqsurfDataDirPath(void);

/*
 * Sets the path name of the default pqsurf(1) output product-queue for the
 * duration of the process.
 *
 * Arguments:
 *      path            Pointer to the path name.  Shall not be NULL.  Can be
 *                      absolute or relative to the current working directory.
 */
void setSurfQueuePath(
    const char* const   path);

/*
 * Returns the path name of the default pqsurf(1) output product-queue
 *
 * Returns:
 *      NULL            Error.  "log_add()" called.
 *      else            Pointer to the pathname.  Might be absolute or relative
 *                      to the current working directory.
 */
const char* getSurfQueuePath(void);

/*
 * Sets the path name of the default pqsurf(1) configuration-file for the
 * duration of the process.
 *
 * Arguments:
 *      path            Pointer to the path name.  Shall not be NULL.  Can be
 *                      absolute or relative to the current working directory.
 */
void setPqsurfConfigPath(
    const char* const   path);

/*
 * Returns the path name of the default pqsurf(1) configuration-file.
 *
 * Returns:
 *      NULL            Error.  "log_add()" called.
 *      else            Pointer to the pathname.  Might be absolute or relative
 *                      to the current working directory.
 */
const char* getPqsurfConfigPath(void);

/**
 * Returns the pathname of the home of the LDM installation.
 *
 * Returns
 *      Pointer to the pathname.  Might be absolute or relative to the current
 *      working directory.
 */
const char* getLdmHomePath(void);

/**
 * Returns the pathname of the static, system-specific directory
 *
 * Returns:
 *      Pointer to the pathname.  Might be absolute or relative to the current
 *      working directory.
 */
const char* getSysConfDirPath(void);

/**
 * Returns the pathname of the registry directory.
 *
 * Returns:
 *      else            Pointer to the pathname. Might be absolute or relative
 *                      to the current working directory.
 */
const char* getRegistryDirPath(void);

/**
 * Indicates whether or not the anti-denial-of-service attack feature is
 * enabled.
 *
 * @retval 0  The feature is disabled.
 * @retval 1  The feature is enabled.
 */
int
isAntiDosEnabled(void);

/**
 * Returns the backlog time-offset for making requests of an upstream LDM.
 *
 * @return  The backlog time-offset, in seconds, for making requests of an
 *          upstream LDM.
 */
unsigned
getTimeOffset(void);

/**
 * Sets the pathname of the directory for LDM log files for the duration of the
 * process.
 *
 * @param[in] pathname  Pathame of the directory.  Shall not be NULL.  Can be
 *                      absolute or relative to the current working directory.
 */
void setLdmLogDir(
    const char* const   path);

/**
 * Returns the pathname of the directory for LDM log files. This function
 * is thread-safe.
 *
 * @return The pathname of the LDM log file directory.
 */
const char*
getLdmLogDir(void);

/**
 * Returns the absolute path of the directory for information on the system
 * since the last boot.
 *
 * @return The absolute path of the LDM var/run directory.
 */
const char*
getLdmVarRunDir(void);

#ifdef __cplusplus
}
#endif

#endif /*!_LDM_SERVER_GLOBAL_H*/
