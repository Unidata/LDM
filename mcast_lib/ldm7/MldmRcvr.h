/* DO NOT EDIT THIS FILE. It was created by extractDecls */
/**
 * Copyright 2014 University Corporation for Atmospheric Research. All rights
 * reserved. See the the file COPYRIGHT in the top-level source-directory for
 * licensing conditions.
 *
 *   @file: mldm_receiver.hin
 * @author: Steven R. Emmerson
 *
 * This file specifies the API for the multicast LDM receiver.
 */

#ifndef MCAST_DOWN_H
#define MCAST_DOWN_H

#include "down7.h"
#include "fmtp.h"
#include "ldm.h"
#include "mcast_info.h"
#include "pq.h"

typedef struct mlr Mlr;
/**
 * Callback-function for notifying the upper layer about a product that was
 * not received via multicast. Queues the product for reception by other means.
 * Returns immediately.
 *
 * @param[in] iProd   Index of the missed product.
 * @param[in] obj     Optional pointer to an object.
 */
typedef void (*mlr_missed_product_func)(McastProdIndex iProd, void *obj);

#ifdef __cplusplus
extern "C" {
#define restrict
#endif

/**
 * Returns a new multicast LDM receiver object.
 *
 * @param[in]  mcastInfo      Pointer to information on the multicast group.
 * @param[in]  iface          IP address of interface to use for receiving
 *                            multicast and unicast packets. Caller may free.
 * @param[in]  pq             Product queue. Must exist until `deinit()`
 *                            returns.
 * @retval     NULL           Failure. `log_add()` called.
 * @return                    Pointer to a new multicast LDM receiver object.
 *                            The caller should call `mlr_free()` when it's no
 *                            longer needed.
 */
Mlr*
mlr_new(const SepMcastInfo* const restrict mcastInfo,
        const char* const restrict         iface,
        pqueue* const restrict             pq);

/**
 * Frees the resources of a multicast LDM receiver object.
 *
 * @param[in,out] mlr   The multicast LDM receiver object.
 */
void
mlr_free(Mlr* const mlr);

/**
 * Executes a multicast LDM receiver. Doesn't return until `mlr_halt()` is
 * called or an error occurs.
 *
 * @param[in] mlr            The multicast LDM receiver to execute.
 * @retval    LDM7_SHUTDOWN  `mlr_stop()` was called.
 * @retval    LDM7_INVAL     `mlr == NULL`. `log_add()` called.
 * @retval    LDM7_MCAST     Multicast error. `log_add()` called.
 * @see `mlr_stop()`
 */
int
mlr_run(Mlr* const mlr);

/**
 * Cleanly stops an executing multicast LDM receiver. Undefined behavior
 * results if called from a signal handler. Returns immediately. Idempotent.
 *
 * @param[in] mlr      Pointer to the multicast LDM receiver to stop.
 * @asyncsignalsafety  Unsafe
 */
void
mlr_halt(Mlr* const mlr);

#ifdef __cplusplus
}
#endif

#endif
