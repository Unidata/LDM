# vlanUtil
#  Created on: Jun 27, 2018
#      Author: Steven R. Emmerson

# Exit on error
set -e

# ip(1) is in "/sbin"
export PATH=/usr/bin:/bin:/usr/sbin:/sbin

printUsage()
{
    name=`basename $0`
    cat 1>&2 <<EOF
Usage:
    $name create <virtIface> <ifaceCidr> [<srvrAddr>]
    $name destroy <virtIface> [<srvrAddr>]
Operands:
    <virtIface>   Specification of virtual interface (e.g., "eth0.4000")
    <ifaceCidr>   IP address and prefix length for virtual interface (e.g.,
                  "10.40.1.1/24")
    <srvrAddr>    IP address of sending FMTP server (e.g., "192.168.0.1").
                  Only receiver should specify.
EOF
}

# Destroys a VLAN if it exists
destroy()
{
    virtIface="${1:?Virtual interface not specified}"
    srvrAddr="${2}"
    status=0

    # Remove route to sender if it exists
    if test "$srvrAddr"; then
        if ip route get "$srvrAddr" | fgrep "$virtIface" >/dev/null 2>&1; then
            if ! ip route del "$srvrAddr" dev "$virtIface"; then
                echo 1>&2 "Couldn't remove interface $virtIface as route to $srvrAddr"
                status=1;
            fi
        fi
    fi

    # Delete virtual interface if it exists. This also deletes its address.
    if ip link show dev "$virtIface" >/dev/null 2>&1; then
        if ! ip link set dev "$virtIface" down; then
            echo 1>&2 "Couldn't disable interface $virtIface"
            status=1
        else
            if ! ip link del dev "$virtIface"; then
                echo 1>&2 "Couldn't delete interface $virtIface"
                status=1
            fi
        fi
    fi
    
    return $status
}

# Creates a VLAN after first destroying any previously-existing one.
create()
{
    virtIface="${1:?Virtual interface not specified}"
    ifaceCidr="${2:?Virtual interface\'s CIDR address not specified}"
    srvrAddr="${3}"
    status=0

    # If this is a receiving node, then ensure that VLAN doesn't exist
    if test "$srvrAddr"; then
        # In subshell so parameters not overwritten
        if ! (destroy "$virtIface" "$srvrAddr"); then
            echo 1>&2 "Couldn't destroy previous VLAN"
            status=1
        fi
    fi

    if test $status -eq 0; then
        # Obtain name of physical interface and VLAN ID
        set `echo $virtIface | tr . ' ' | awk '{print $1, $NF}'`
        phyIface="${1:?Physical interface not specified}"
        vlanId="${2:?VLAN ID not specified}"

        # Create VLAN
        if ! ip link add link "$phyIface" name "$virtIface" type vlan \
                id "$vlanId"; then
            echo 1>&2 "Couldn't create VLAN interface $virtIface"
            status=1
        else
            # Must be before route is added
            if ! ip link set dev "$virtIface" up; then
                echo 1>&2 "Couldn't enable interface $virtIface"
                status=1
            else
                set `echo $ifaceCidr | tr . ' ' | tr / ' '`

                subnetAddr=$((((((($1<<8)+$2)<<8)+$3)<<8)+$4))
                hostMask=$(((1<<(32-$5))-1));
                bcastAddr=$(($subnetAddr|$hostMask))
                bcastAddr=`printf "%d.%d.%d.%d\n" \
                    $(($bcastAddr>>24)) \
                    $((($bcastAddr>>16)&0xFF)) \
                    $((($bcastAddr>>8)&0xFF)) \
                    $(($bcastAddr&0xFF))`

                if ! ip addr add "$ifaceCidr" broadcast $bcastAddr \
                        dev "$virtIface"; then
                    echo 1>&2 "Couldn't add address $ifaceCidr to interface " \
                        "$virtIface"
                    status=1
                fi
            fi
        fi

        # If this is a receiving node, then add route to sending FMTP server
        if test $status -eq 0 -a "$srvrAddr"; then
            # Must be after interface is up
            if ! ip route add "$srvrAddr" dev "$virtIface"; then
                echo 1>&2 "Couldn't add interface $virtIface as route to " \
                        "$srvrAddr"
                status=1
            fi
        fi
    fi
    
    return $status
}

case "$1" in
    create)
        shift
        create "$@";;
    destroy)
        shift
        destroy "$@";;
    *)  printUsage
        exit 1;;
esac
