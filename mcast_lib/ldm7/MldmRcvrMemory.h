/* DO NOT EDIT THIS FILE. It was created by extractDecls */
/**
 * Copyright 2014 University Corporation for Atmospheric Research. All rights
 * reserved. See the the file COPYRIGHT in the top-level source-directory for
 * licensing conditions.
 *
 *   @file: mldm_receiver_memory.hin
 * @author: Steven R. Emmerson
 *
 * This file specifies the API for persistent memory between multicast sessions
 */

#ifndef MCAST_SESSION_MEMORY_H
#define MCAST_SESSION_MEMORY_H

#include "fmtp.h"
#include "InetSockAddr.h"
#include "inetutil.h"
#include "ldm.h"

#include <stdbool.h>

/**
 * Multicast session memory:
 */
typedef struct McastReceiverMemory McastReceiverMemory;

/**
 * Iterator over files that were missed by the multicast receiver for a
 * multicast session memory:
 */
typedef struct MissedFileIterator MissedFileIterator;

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Deletes a multicast-receiver memory-file. This function is reentrant.
 *
 * @param[in] servAddr  Address of the server.
 * @param[in] feed      Feedtype of the multicast group.
 * @retval    true      Success or the file doesn't exist.
 * @retval    false     Error. `log_add()` called.
 */
bool
mrm_delete(
    InetSockAddr* const servAddr,
    const feedtypet     feed);

/**
 * Opens a multicast receiver memory.
 *
 * @param[in] ldmSrvr  Address of LDM7 server
 * @param[in] feed     Subscribed-to feed
 * @retval    `NULL`   Failure. `log_add()` called.
 * @return             Pointer to multicast receiver memory
 */
McastReceiverMemory*
mrm_open(
    InetSockAddr* const ldmSrvr,
    const feedtypet     feed);

/**
 * Closes a multicast receiver memory. Upon successful return, the multicast
 * receiver memory of a subsequent identical `mrm_open()` will comprise that of
 * the previous `mrm_open()` as subsequently modified prior to calling this
 * function. This function is thread-compatible but not thread-safe for the
 * same argument.
 *
 * @param[in] mrm    The multicast receiver memory, returned by `mrm_open()`, to
 *                   be closed. Use of this object upon successful return from
 *                   this function results in undefined behavior.
 * @retval    true   Success.
 * @retval    false  Failure. `log_add()` called. `mrm` is unmodified.
 */
bool
mrm_close(
    McastReceiverMemory* const mrm);

/**
 * Sets the signature of the last data-product received via multicast in a
 * multicast receiver memory. It is unspecified when the memory-file is
 * modified.
 *
 * @param[in] mrm    The multicast receiver memory.
 * @param[in] sig    Signature of the last data-product received via multicast.
 * @retval    true   Success.
 * @retval    false  Failure. `log_add()` called. The multicast receiver
 *                   memory is unmodified. Thread-safe.
 */
bool
mrm_setLastMcastProd(
    McastReceiverMemory* const restrict mrm,
    const signaturet                    sig);

/**
 * Returns the signature of the last data-product received via multicast of a
 * multicast receiver memory. Thread-safe.
 *
 * @param[in]  mrm    The multicast receiver memory.
 * @param[out] sig    Signature of the last data-product received via multicast.
 * @retval     true   Success. `sig` is set.
 * @retval     false  The signature doesn't exist. `sig` is unaltered.
 */
bool
mrm_getLastMcastProd(
    McastReceiverMemory* const restrict mrm,
    signaturet                          sig);

/**
 * Clears the list of files in a multicast receiver memory that were missed by
 * the multicast receiver: both the missed-but-not-requested and
 * requested-but-not-received queues are cleared. Idempotent. Thread-safe.
 *
 * @param[in] mrm  The multicast receiver memory.
 */
void
mrm_clearAllMissedFiles(
    McastReceiverMemory* const restrict mrm);

/**
 * Removes and returns the index of a product that has not been received by
 * the multicast receiver associated with a multicast receiver memory. The
 * requested-but-not-received queue is tried first; then the
 * missed-but-not-requested queue. Thread-safe.
 *
 * @param[in] mrm     The multicast receiver memory.
 * @param[in] iProd   The index of the missed product.
 * @retval    true    Such an index exists. `*iProd` is set.
 * @retval    false   No such index (the queues are empty).
 */
bool
mrm_getAnyMissedFileNoWait(
    McastReceiverMemory* const restrict mrm,
    FmtpProdIndex* const restrict      iProd);

/**
 * Adds an index of a product that was missed by the multicast receiver but
 * has not yet been requested to the current list of such files in a multicast
 * receiver memory. Thread-safe.
 *
 * @param[in] mrm    The multicast receiver memory.
 * @param[in] id     The product-index to add.
 * @retval    true   Success.
 * @retval    false  Error. `log_add()` called.
 */
bool
mrm_addMissedFile(
    McastReceiverMemory* const restrict mrm,
    const FmtpProdIndex                iProd);

/**
 * Adds an index of a product that was missed by the multicast receiver and
 * has been requested from the upstream LDM-7 to the current list of such
 * products in a multicast receiver memory. Thread-safe.
 *
 * @param[in] mrm    The multicast receiver memory.
 * @param[in] id     The product-index to add.
 * @retval    true   Success.
 * @retval    false  Error. `log_add()` called.
 */
bool
mrm_addRequestedFile(
    McastReceiverMemory* const restrict mrm,
    const FmtpProdIndex                iProd);

/**
 * Returns (but doesn't remove) the next product-index from the
 * missed-but-not-requested queue of a multicast receiver memory. Blocks until
 * such a file is available. Thread-safe.
 *
 * @param[in] mrm     The multicast receiver memory.
 * @param[in] iProd   The product-index.
 * @retval    true    Success. `*iProd` is set.
 * @retval    false   The queue has been shutdown.
 */
bool
mrm_peekMissedFileWait(
    McastReceiverMemory* const restrict mrm,
    FmtpProdIndex* const restrict      iProd);

/**
 * Returns (but doesn't remove) the next product-index from the
 * missed-but-not-requested queue of a multicast receiver memory. Thread-safe.
 *
 * @param[in] mrm     The multicast receiver memory.
 * @param[in] iProd   The product-index.
 * @retval    true    The index exists. `*iProd` is set.
 * @retval    false   No such index (the queue is empty).
 */
bool
mrm_peekMissedFileNoWait(
    McastReceiverMemory* const restrict mrm,
    FmtpProdIndex* const restrict      iProd);

/**
 * Removes and returns the next product-index from the
 * missed-but-not-requested queue of a multicast receiver memory. Thread-safe.
 *
 * @param[in] mrm     The multicast receiver memory.
 * @param[in] iProd   The product-index.
 * @retval    true    The index exists. `*iProd` is set.
 * @retval    false   No such index (the queue is empty).
 */
bool
mrm_removeMissedFileNoWait(
    McastReceiverMemory* const restrict mrm,
    FmtpProdIndex* const restrict      iProd);

/**
 * Returns (but doesn't remove) the next product-index from the
 * requested-but-not-received queue of a multicast receiver memory. Doesn't
 * block. Thread-safe.
 *
 * @param[in] mrm     The multicast receiver memory.
 * @param[in] iProd   The product-index.
 * @retval    true    Success. `*iProd` is set.
 * @retval    false   No such identifier (the queue is empty).
 */
bool
mrm_peekRequestedFileNoWait(
    McastReceiverMemory* const restrict mrm,
    FmtpProdIndex* const restrict      iProd);

/**
 * Removes and returns the next product-index from the
 * requested-but-not-received queue of a multicast receiver memory. Thread-safe.
 *
 * @param[in] mrm     The multicast receiver memory.
 * @param[in] iProd   The product-index.
 * @retval    true    The index exists. `*iProd` is set.
 * @retval    false   No such index (the queue is empty).
 */
bool
mrm_removeRequestedFileNoWait(
    McastReceiverMemory* const restrict mrm,
    FmtpProdIndex* const restrict      iProd);

/**
 * Shuts down the queue of missed-but-not-requested files in a multicast
 * receiver memory. Idempotent and thread-safe.
 *
 * @param[in] mrm     The multicast receiver memory.
 */
void
mrm_shutDownMissedFiles(
    McastReceiverMemory* const restrict mrm);

/**
 * Restarts the operation of the queue of missed-but-not-requested files in a
 * multicast receiver memory. The queue picks up where it left off. Idempotent
 * and thread-safe.
 *
 * @param[in] mrm  Multicast receiver memory
 */
void
mrm_restart(McastReceiverMemory* const mrm);

#ifdef __cplusplus
}
#endif

#endif
