/* DO NOT EDIT THIS FILE. It was created by extractDecls */
/**
 * Copyright 2014 University Corporation for Atmospheric Research. All rights
 * reserved. See the the file COPYRIGHT in the top-level source-directory for
 * licensing conditions.
 *
 *   @file: prod_index_queue.hin
 * @author: Steven R. Emmerson
 *
 * This file declares the API for a queue of product indexes.
 */

#ifndef PROD_INDEX_QUEUE_H
#define PROD_INDEX_QUEUE_H

#include "fmtp.h"
#include "ldm.h"

typedef struct prod_index_queue  ProdIndexQueue;

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Returns a new product-index queue.
 *
 * @retval NULL  Failure. \c log_add() called.
 * @return       Pointer to a new product-index queue. The client should call
 *               \c piq_free() when it is no longer needed.
 */
ProdIndexQueue*
piq_new(void);

/**
 * Clears a product-index queue of all entries.
 *
 * @param[in] piq  The product-index queue to be cleared.
 * @return         The number of entries removed.
 */
size_t
piq_clear(
    ProdIndexQueue* const piq);

/**
 * Frees a product-index queue. Accessing the queue after calling this
 * function results in undefined behavior.
 *
 * @param[in] piq  Pointer to the product-index queue to be freed or NULL.
 */
void
piq_free(
    ProdIndexQueue* const piq);

/**
 * Adds a product-index to a queue.
 *
 * @param[in,out] piq        Pointer to the product-index queue to which to
 *                           add a product-index.
 * @param[in]     iProd      Index of the data-product.
 * @retval        0          Success.
 * @retval        ENOMEM     Out of memory. \c log_add() called.
 * @retval        ECANCELED  The queue has been canceled.
 */
int
piq_add(
    ProdIndexQueue* const piq,
    const FmtpProdIndex   iProd);

/**
 * Returns (but does not remove) the product-index at the head of the
 * product-index queue. Blocks until such an entry is available or
 * the queue is canceled.
 *
 * @param[in,out] piq        Pointer to the product-index queue.
 * @param[out]    iProd      Pointer to the product-index to be set to
 *                           that of the head of the queue.
 * @retval        0          Success. \c *iProd is set.
 * @retval        ECANCELED  Operation of the queue has been canceled.
 */
int
piq_peekWait(
    ProdIndexQueue* const piq,
    FmtpProdIndex* const  iProd);

/**
 * Immediately removes and returns the product-index at the head of a
 * product-index queue. Doesn't block.
 *
 * @param[in,out] piq        Pointer to the product-index queue.
 * @param[out]    iprod      Pointer to the product-index to be set to
 *                           that of the head of the queue.
 * @retval        0          Success. \c *iProd is set.
 * @retval        ENOENT     The queue is empty.
 */
int
piq_removeNoWait(
    ProdIndexQueue* const piq,
    FmtpProdIndex* const  iProd);

/**
 * Immediately returns (but does not remove) the product-index at the head of
 * the product-index queue.
 *
 * @param[in,out] piq        Pointer to the product-index queue.
 * @param[out]    iProd      Pointer to the product-index to be set to
 *                           that of the head of the queue.
 * @retval        0          Success. \c *iProd is set.
 * @retval        ENOENT     The queue is empty.
 */
int
piq_peekNoWait(
    ProdIndexQueue* const piq,
    FmtpProdIndex* const  iProd);

/**
 * Returns the number of entries currently in a product-index queue.
 *
 * @param[in] piq  The product-index queue.
 * @return         The number of identifiers in the queue.
 */
size_t
piq_count(
    ProdIndexQueue* const piq);

/**
 * Cancels the operation of a FMTP product-index queue. Idempotent.
 *
 * @param[in] piq     Pointer to the queue to be canceled.
 * @retval    0       Success.
 * @retval    EINVAL  `piq == NULL`
 */
int
piq_cancel(
    ProdIndexQueue* const piq);

/**
 * Restarts the operation of an FMTP product-index queue on which `piq_cancel()`
 * has been called. Idempotent.
 *
 * @param[in] piq     Queue to be restarted
 * @retval    0       Success
 * @retval    EINVAL  `piq == NULL`
 */
int
piq_restart(ProdIndexQueue* const piq);

/**
 * Indicates if a product-index queue has been canceled.
 *
 * @param[in] piq    Pointer to the product-index queue.
 * @retval    false  The queue has not been canceled.
 * @retval    true   The queue has been canceled.
 */
bool
piq_isCanceled(
    ProdIndexQueue* const piq);

#ifdef __cplusplus
}
#endif

#endif
