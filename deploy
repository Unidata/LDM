# Deploys an LDM package to a remote system.

PATH=/bin:/usr/bin:/usr/local/bin

set -e

printUsage()
{
    cat 1>&2 <<EOF
Usage: `basename $0` [-i] [-M <make>] [-m] [-n] [-r <root>] [-s] [-u <user>] [-v <version>] <host>
Where:
    -i           Install only: do not throw runtime link and execute
    -M <make>    Pathname of make(1) utility
    -m           Enable multicast support
    -n           Enable NOAAPort support
    -r <root>    Use account <root> for root privileges -- including use of
                 sudo(8) -- instead of "root"
    -s           Use sudo(1)
    -u <user>    Use account <user> instead of "ldm"
    -v <version> Use LDM version <version> instead of first word in CHANGE_LOG
    <host>       ssh(1)able remote host (e.g., "node0")
EOF
}

unset installOnly
makePath=make
ldmUser=ldm
version=`awk '{print $1; exit}' CHANGE_LOG`
rootUser=root
sudoUser=ldm

while getopts iM:mnr:su:v: opt; do
    case $opt in
        i) installOnly=true;;
        M) makePath=$OPTARG;;
        m) withMulticast=true;;
        n) withNoaaport=true;;
        r) rootUser=$OPTARG
           sudoUser=$OPTARG;;
        s) useSudo=true;;
        u) ldmUser=$OPTARG;;
        v) version=$OPTARG;;
        *) printUsage
           exit 1;;
    esac
done
shift `expr $OPTIND - 1`

host=${1:?Host not specified}

ps -fu $LOGNAME | grep 'ssh upc'  | grep -v grep >/dev/null && host=$host-r

pkgId=ldm-$version
tarball=$pkgId.tar.gz

echo "Deploying $pkgId to $ldmUser@$host"

scp $tarball $ldmUser@$host:

# ssh(1) is used thrice because some security policies don't allow
# ssh(1)ing to the remote host and then executing su(1) in a here-document.

ssh -x -T $ldmUser@$host bash --login <<EOF
    set -e

    echo Unpacking
    gunzip -c $tarball | pax -r '-s:/:/src/:'

    echo Configuring
    cd $pkgId/src/
    ./configure --disable-root-actions --enable-debug \
            ${withMulticast+--with-multicast} ${withNoaaport+--with-noaaport} \
            >&configure.log

    echo Installing
    make install >&install.log
EOF

echo -en '\a'
sleep 1
echo -en '\a'

if test "${useSudo}"; then
    echo "Making root actions using account \"$sudoUser\" and sudo(8)"
    ssh -x $sudoUser@$host bash --login <<EOF
        set -e
        cd ~$ldmUser/$pkgId/src
        # $sudoUser might not be able to create a file in the current directory
        sudo $makePath root-actions >& '/tmp/root-actions-$$.log'
        sudo mv '/tmp/root-actions-$$.log' root-actions.log
        sudo chown $ldmUser root-actions.log
EOF
else
    echo "Making root actions using account '$rootUser'"
    ssh -x -T $rootUser@$host bash --login <<EOF
        set -e
        cd ~$ldmUser/$pkgId/src
        $makePath root-actions >&root-actions.log
EOF
fi

if test -z "${installOnly}"; then
    ssh -x -T $ldmUser@$host bash --login <<EOF
        set -e
        if test -e runtime && ldmadmin stop; then
            echo "Throwing the runtime switch"
            rm runtime
            ln -s $pkgId runtime
            ldmadmin start
        else
            echo "LDM wasn't previously installed or isn't running. New installation not started."
            rm -f runtime
            ln -s $pkgId runtime
        fi
        
        # Delete previous versions. NB: THIS SHOULD ONLY BE DONE ON NON-PRODUCTION
        # SYSEMS!
        #find . \( -name 'ldm-*.gz' -o \( -name 'ldm-*' -type d \) \) \
                #! -name $pkgId ! -name $pkgId.tar.gz -print -prune | xargs rm -rf
EOF
fi
