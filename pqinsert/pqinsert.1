.TH PQINSERT 1 "2010-03-10"
.SH NAME
pqinsert - insert files as products in an LDM product queue.
.SH "SYNOPSIS"
.B pqinsert " -h"
.br
.B pqinsert
.RB [ -f " \fIfeedtype"\fP ]
.RB [ -i ]
.RB [ -l " \fIlogdest"\fP ]
.RB [ -n " \fIstdin-size"\fP ]
.RB [ -p " \fIproductID"\fP ]
.RB [ -q " \fIqueue"\fP ]
.RB [ -s " \fIseqno"\fP ]
.RB [ -v\fR|\fP-x ]
.RB [ \fIfile\fP " ...]"
.SH DESCRIPTION
.LP
This program creates LDM data-produts from external sources and inserts
them into the product-queue.
It is also an example of how to do this.
It might be useful to resend data
after a downstream node has been offline, or to queue locally generated
products for transmission.
.LP
Each file given on the command line is converted to a separate ldm data product.
By default, the file name is used as product identifier.
This default can be changed using the \fB\-p\fR\
 option to specify some other product identifier.
The product feed type is specified by the \fB\-f\fR\ option.
The current time is used as product creation time.
The product is then inserted at the end of the specified queue.
.LP
If no files are specified, then a single data-product is read from
standard input.
.SH OPTIONS 
.TP 8
.B -h
Log a usage message and then terminate successfully.
.TP
.BI -i
Compute the MD5 signature from the product-identifier rather than from
the product's data.
You should only use this option if computing the
MD5 signature from the product's data takes too long and if
the product-identifier is unique.
.TP
.BI -f " feedtype"
Asserts that the data being sent has feed type \fIfeedtype\fR.
The default is `EXP', indicating an experimental feedtype.
.TP
.BI -l " logdest"
Log to \fIlogdest\fP. One of \fB''\fP (system logging daemon), \fB'-'\fP
(standard error stream), or file \fIlogdest\fP. Default is the standard error
stream if the process has a controlling terminal (i.e., the process isn't a
daemon); otherwise, either the LDM log file or the system logging daemon
(execute this program with just the option \fB'-?'\fP to determine which).
.TP
.BI -p " productID"
Use \fIproductID\fP in constructing the product-identifier. For reading
from standard input or a single file, \fIproductID\fP will be the
product-identifier. For multiple files, the product-identifiers will
be \fIproductID\fP.\fIseqno\fP. The defaults for standard input and
files are "STDIN" and the file pathnames, respectively.
.TP
.BI \-q " queue"
Pathname of the queue into which to insert the files.
The default is the standard LDM log file.
.TP
.BI \-s " seqno"
Sets the product sequence number associated with the first product
to \fIseqno\fR. Subsequent products (files on the command line)
are numbered sequentially. Defaults to zero.
.TP
.B \-v
Verbose flag.  If present, the log will contain a line for 
each product file that was inserted.
.TP
.BI \-x
Requests that debugging information also be printed.
.SH EXIT STATUS
.LP
If the program exits with a failure status, then the user should check 
the log messages for details on the failure. If the exit-status is 
non-zero, then it will be that of the last input file for which an error
occurred, which will hide previous errors; consequently, inserting files
one-at-a-time is advisable if you need to know for which file an error
occurred.
.TP
.B 0
Success.  All input files were inserted into the product-queue.
.TP
.B 1
A failure occurred in the operating-system.  No files were processed.
.TP
.B 2
The product-queue couldn't be opened for writing.  No files were processed.
.TP
.B 3
A problem occurred while processing an input file, which was not added
to the product-queue.  Other files might have been added.
.TP
.B 4
An input file is already in the product-queue according to its MD5 
signature.
.TP
.B 6
The MD5 signature computation couldn't be initialized.  No files were
processed.
.SH EXAMPLE
The command
.RS +4
.nf
pqinsert -v -q /var/data/nldn/ldm.pq -f NLDN 19940906220206
.fi
.RE
will insert the file `19940906220206' at the end of `/var/data/nldn/ldm.pq'
with feedtype `NLDN'.
.SH "SEE ALSO"
pq(3), ldmd(1), pqact(1), pqsend(1)
.SH DIAGNOSTICS
Error messages and log messages are written to the log file. 
