/*
 *   See file COPYRIGHT for copying and redistribution conditions.
 */

#ifndef _PQ_H
#define _PQ_H

#include "ldm.h"        /* prod_class_t */
#include "prod_class.h"

#include <sys/types.h>	/* off_t, mode_t */
#include <stdbool.h>
#include <stddef.h>	/* size_t */


/*
 * The functions below return ENOERR upon success.
 * Upon failure, the return something else :-).
 * (Usually, that something else will be the a system
 * error (errno.h), don't count on it making sense.)
 */
#ifndef ENOERR
#define ENOERR 0
#endif /*!ENOERR */

#define PQ_END      -1	// at end of product-queue
#define PQ_DUP      -2 	// attempt to insert duplicate product
#define PQ_BIG      -3 	// attempt to insert product that's too large
#define PQ_SYSTEM   -4	// system error
#define PQ_LOCKED   -5  // data-product is locked by another process
#define PQ_CORRUPT  -6	// the product-queue is corrupt
#define PQ_NOTFOUND -7	// no such data-product
#define PQ_INVAL    -8  // Invalid argument

typedef struct pqueue pqueue; /* private, implemented in pq.c */
extern struct pqueue *pq;

typedef struct pqe_index pqe_index;

/* prototype for 4th arg to pq_sequence() */
typedef int pq_seqfunc(const prod_info *infop, const void *datap,
	void *xprod, size_t len,
	void *otherargs);

/*
 * Which direction the cursor moves in pq_sequence().
 */
typedef enum {
	TV_LT = -1,
	TV_EQ =  0,
	TV_GT =  1
} pq_match;

struct pqe_index {
	off_t      offset;
	signaturet signature;
	bool       sig_is_set;
};

typedef struct {
    prod_info info;
    void*     data;
    void*     encoded;
    size_t    size;
} prod_par_t;

typedef struct {
    timestampt inserted;
    off_t      offset;
    bool       early_cursor;
    bool       is_full;
    bool       is_locked;
} queue_par_t;

typedef void pq_next_func(
        const prod_par_t* restrict  prod_par,
        const queue_par_t* restrict queue_par,
        void* restrict              app_par);

/*
 * pflags arg to pq_open() and pq_create()
 */
#define PQ_DEFAULT	0x00
#define PQ_NOCLOBBER	0x01	/* Don't destroy existing file on create */
#define PQ_READONLY	0x02	/* Default is read/write */
#define PQ_NOLOCK	0x04	/* Disable locking (DANGER!) */
#define PQ_PRIVATE	0x08	/* mmap() the file MAP_PRIVATE, default MAP_SHARED */
#define PQ_NOGROW	0x10	/* If pq_create(), must have intialsz */
#define PQ_NOMAP	0x20	/* Use malloc/read/write/free instead of mmap() */
#define PQ_MAPRGNS	0x40	/* Map region by region, default whole file */
#define PQ_SPARSE       0x80    /* Created as sparse file, zero blocks unallocated */
#define PQ_THREADSAFE   0x100   /* Make the queue access functions thread-safe */
/* N.B.: bits 0x1000 (and above) in use internally */

#define pqeOffset(pqe) ((pqe).offset)
#define pqeEqual(left, rght) (pqeOffset(left) == pqeOffset(rght))

#define PQE_NONE (_pqenone)
#define pqeIsNone(pqe) (pqeEqual(pqe, PQE_NONE))
#define PQUEUE_DUP PQ_DUP	// attempt to insert duplicate product
#define PQUEUE_BIG PQ_BIG	// attempt to insert product that's too large
#define PQUEUE_END PQ_END	// return value indicating end of queue

#ifdef __cplusplus
extern "C" {
#endif

extern const pqe_index _pqenone;

@FUNCTION_DECLARATIONS@

#define PQ_WARN_IF_OLDEST(queue_par, prod_par, prefix) \
    do { \
        if (queue_par->is_full && queue_par->early_cursor) { \
            char        buf[LDM_INFO_MAX]; \
            timestampt  now; \
            (void)set_timestamp(&now); \
            log_warning(prefix " oldest product in full queue: age=%g s, prod=%s", \
                d_diff_timestamp(&now, &queue_par->inserted), \
                s_prod_info(buf, sizeof(buf), &prod_par->info, log_is_enabled_debug)); \
            log_warning("Products might be deleted before being acted upon! " \
                    "Queue too small? System overloaded?"); \
         } \
     } while (0)

#ifdef __cplusplus
}
#endif

#endif /* !_PQ_H */
