####
# $Id: pqact.conf,v 1.11.6.1.4.2.2.4 2008/09/17 16:36:09 steve Exp $
#
# This is an example pqact.conf file,
# with some example entries commented out.
#
# The entries in this file control the disposition of data-products on
# the local computer.  More information on this file can be found at
#
#   http://www.unidata.ucar.edu/software/ldm/
#
# under the "LDM Basics" webpages of a specific LDM release.
#
# The various display and analysis packages each have their own
# conventions on data disposition.  When you install a package such as
# GEMPAK or McIdas, you should find with that package a collection of
# entries to add to this file.
#
##
# The format of an entry is
#
#  feedtype tab pattern tab action [tab options] [tab action_args]
#
# where tab is \t or \n\t.
#
# Actions, options, and arguments are
#
#	NOOP
#		Do nothing
#
#	FILE	tab [-close|-flush] [-log] [-metadata] [-overwrite] [-strip] filename
#
#		write(2) the data-product to a file.
#
#		"-close"        Close the file after writing to it.
#
#		"-flush"        Call fsync(2) after writing to the file.
#
#		"-log"          Write a NOTICE-level message to the LDM log
#		                file indicating that the data-product was
#		                written the the file.  The format of the
#		                message is "Filed in \"%s\": %s", where the
#		                first "%s" is replaced with the pathname of the
#		                file and the second "%s" is replaced with the
#		                data-product metadata: size, creation-time,
#		                feedtype, sequence-number, and
#		                product-identifier.
#
#		"-metadata"     Write the metadata of the data-product to the
#		                file before any data.  The metadata is written
#		                in the following order using the indicated
#		                data-types:
#                   metadata-length in bytes			uint32_t
#                   data-product signature (MD5 checksum)	uchar[16]
#                   data-product size in bytes			uint32_t
#                   product creation-time in seconds since the epoch:
#                       integer portion				uint64_t
#                       microseconds portion			int32_t
#                   data-product feedtype			uint32_t
#                   data-product sequence number		uint32_t
#                   product-identifier:
#                       length in bytes (excluding NUL)		uint32_t
#                       non-NUL-terminated string		char[]
#                   product-origin:
#                       length in bytes (excluding NUL)		uint32_t
#                       non-NUL-terminated string		char[]
#
#		"-overwrite"    Rewind the file before writing to it.
#
#		"-strip"        Remove all control characters from the data
#		                before writing it to the file.
#
#	STDIOFILE	tab [-close|-flush] [-overwrite] [-strip] filename
#		fwrite(3) (buffered io) to file ("-flush" calls fflush(3))
#
#	DBFILE	tab dbfilename [dbkey]
#		Put to gdbmfile.
#
#	PIPE	tab [-close|-flush] [-metadata] [-nodata] [-strip] commandname [args]
#
#		Write the data to the standard input stream of a subprocess
#		specified by
#			commandname [args].
#		Uses the execvp(2) library call, so if commandname is not fully
#		qualified, the PATH environment variable will be used.
#
#		See the description under FILE above for the "-close", "-flush",
#               "-metadata", "-nodata", and "-strip" options.
#
#		"-nodata" causes the data portion of the data-product to
#		*not* be written to the pipe.  It also turns on the 
#		"-metadata" option.
#
#	EXEC	tab [-wait] commandname [args ...]
#		Run a program. No io channel between this process and it.
#		Like PIPE above, uses execvp(2).
#
# The '-strip' option to FILE, STDIOFILE, & PIPE removes control characters
# (other than the '\n') from the data before output. This is useful for
# cleaning up WMO format text bulletins.
#
# The "-overwrite" option to FILE and STDIOFILE will cause the output
# file to be truncated when it is opened but not when a data-product is
# written; consequently, you should probably always use the "-close"
# option in conjunction with "-overwrite".
#
# To check the syntax of the pqact.conf file, execute pqact with the product
# queue specified as /dev/null:
#
#	pqact -vxl- -q /dev/null pqact.conf
#
# or
#
#	ldmadmin pqactcheck
#
# To send an HUP signal to pqact
#
#	ldmadmin pqactHUP
#	ldmadmin tail     (used to check HUP, look for ReRead msg)
#
# When creating actions for pqact be sure to also consider when and
# how the data will ultimately be removed, otherwise you may fill up
# your disk.  The LDM 'scour' program is one possibility for removing files.
#
# By default, the FILE action appends to the file. Note that scour
# might not remove a file that is frequently appended to.
# ------------------------------------------------------------------------
# Examples
#
# Metars
# Append all US metars.
# This action will slowly consume disk space.
#IDS|DDPLUS	^SAUS(..) (....) 
#	FILE	surface/US/\2/\1

# Watches, warnings, advisories
# Append all special weather stmts to those of the same type and source.
# This action will slowly consume disk space.
#IDS|DDPLUS	^(WW....) (....) 
#	FILE	WWA/special/\1_\2

# Keep only the most recent nowcast for each forcast office
#IDS|DDPLUS	/pNOW(...)
#	FILE	-overwrite -close nowcast/\1

# Keep only the most recent SIGMET.
#IDS|DDPLUS	^WS
#	FILE	-overwrite -close WWA/lastSIGMET

#
# Bin all the (Non-GRIB) WMO format data, using elements from the
# identifier as path components. The minutes portion of the timestamp,
# and the retransmit code is ignored. The day of the month portion
# of the timestamp is not used as a path component, so it would be
# a good idea to run 'scour' on a less than 24 hour basis.  This
# action uses a lot of disk space.
#
#  "ASUS42 KRDU 012259" gets filed as
#  US/KRDU/22/AS42.wmo
#
#WMO	^([^H][A-Z])([A-Z][A-Z])([0-9][0-9]) (....) ([0-3][0-9])([0-2][0-9])
#	FILE	\2/\4/\6/\1\3.wmo
#
